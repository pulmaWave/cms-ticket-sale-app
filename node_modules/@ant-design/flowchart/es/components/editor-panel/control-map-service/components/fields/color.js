import React, { useState, useRef } from 'react';
import { render, createPortal } from 'react-dom';
import { Button } from 'antd';
import { SketchPicker } from 'react-color';
import { prefix } from '../constants';
var ColorPicker = function (props) {
    var label = props.label, _a = props.value, value = _a === void 0 ? '' : _a, onChange = props.onChange;
    var _b = useState(false), show = _b[0], setShow = _b[1];
    var colorRef = useRef(value);
    var PickContainer = function () {
        return (React.createElement("div", { className: "".concat(prefix, "-pick-color-container") },
            React.createElement("div", { className: "".concat(prefix, "-popover") },
                React.createElement(SketchPicker, { style: {
                        width: '100%',
                    }, onChange: function (color) {
                        colorRef.current = color.hex;
                    } }),
                React.createElement("div", { className: "foolter" },
                    React.createElement(Button, { onClick: function () {
                            setShow(false);
                        } }, "\u53D6\u6D88"),
                    React.createElement(Button, { type: "primary", onClick: function () {
                            onChange === null || onChange === void 0 ? void 0 : onChange(colorRef.current);
                            setShow(false);
                        } }, "\u786E\u8BA4")))));
    };
    var CreatePickColorContainer = function (visible) {
        var existElements = document.getElementsByClassName("".concat(prefix, "-pick-color-container"));
        if (existElements.length) {
            Array.from(existElements).forEach(function (ele) {
                var _a;
                (_a = ele.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(ele);
            });
        }
        if (!visible) {
            return;
        }
        var div = document.createElement('div');
        render(createPortal(React.createElement(PickContainer, null), document.getElementsByTagName('body')[0]), div);
    };
    return (React.createElement("div", { className: "group" },
        label && React.createElement("label", null, label),
        React.createElement("div", { className: "".concat(prefix, "-color-container"), onClick: function () {
                setShow(true);
            } },
            React.createElement("div", { className: "".concat(prefix, "-color"), style: {
                    backgroundColor: value,
                    height: '100%',
                } })),
        CreatePickColorContainer(show)));
};
export default ColorPicker;
