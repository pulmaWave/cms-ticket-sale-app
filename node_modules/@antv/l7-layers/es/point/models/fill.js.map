{"version":3,"sources":["../../../src/point/models/fill.ts"],"names":["AttributeType","gl","BaseModel","GlobelPointFillTriangulation","PointFillTriangulation","Version","mat4","vec3","FillModel","layer","getLayerConfig","opacity","strokeOpacity","strokeWidth","stroke","offsets","blend","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","LUMINANCE","type","FLOAT","u_isMeter","Number","isMeter","u_additive","u_globel","mapService","version","GLOBEL","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_stroke_opacity","u_stroke_width","u_stroke_color","getStrokeColor","u_offsets","isOffsetStatic","animateOption","u_aimate","animateOption2Array","u_time","getLayerAnimateTime","styleAttributeService","createAttributesAndIndices","unit","L7MAP","MAPBOX","calMeter2Coord","buildModels","getSource","extent","minLng","minLat","maxLng","maxLat","center","m1","meterToCoord","m2","meter2coord","isGlobel","buildLayerModel","moduleName","vertexShader","pointFillVert","fragmentShader","pointFillFrag","triangulation","depth","enable","getBlend","destroy","option","speed","rings","registerStyleAttribute","name","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","extrude","x","y","z","n1","fromValues","n2","xzReg","angle","Math","PI","yReg","asin","m","create","rotateY","rotateX","v1","transformMat4","normalize","v2","v3","v4","extrudeIndex","Array","isArray","shape","shape2d","shapeIndex","indexOf"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IAttribute,\n  IElements,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\nimport BaseModel, {\n  styleColor,\n  styleOffset,\n  styleSingle,\n} from '../../core/BaseModel';\nimport {\n  GlobelPointFillTriangulation,\n  PointFillTriangulation,\n} from '../../core/triangulation';\nimport pointFillFrag from '../shaders/fill_frag.glsl';\nimport pointFillVert from '../shaders/fill_vert.glsl';\n\nimport { isNumber } from 'lodash';\n\nimport { Version } from '@antv/l7-maps';\nimport { mat4, vec3 } from 'gl-matrix';\ninterface IPointLayerStyleOptions {\n  opacity: styleSingle;\n  strokeWidth: styleSingle;\n  stroke: styleColor;\n  strokeOpacity: styleSingle;\n  offsets: styleOffset;\n  blend: string;\n  unit: string;\n}\n// 判断当前使用的 style 中的变量属性是否需要进行数据映射\nexport default class FillModel extends BaseModel {\n  public meter2coord: number = 1;\n  private isMeter: boolean = false;\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      strokeOpacity = 1,\n      strokeWidth = 0,\n      stroke = 'rgba(0,0,0,0)',\n      offsets = [0, 0],\n      blend,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      })\n    ) {\n      // 判断当前的样式中哪些是需要进行数据映射的，哪些是常量，同时计算用于构建数据纹理的一些中间变量\n      this.judgeStyleAttributes({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_isMeter: Number(this.isMeter),\n\n      u_additive: blend === 'additive' ? 1.0 : 0.0,\n      u_globel: this.mapService.version === Version.GLOBEL ? 1 : 0,\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_stroke_opacity: isNumber(strokeOpacity) ? strokeOpacity : 1.0,\n      u_stroke_width: isNumber(strokeWidth) ? strokeWidth : 0.0,\n      u_stroke_color: this.getStrokeColor(stroke),\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n  public getAnimateUniforms(): IModelUniform {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    return {\n      u_aimate: this.animateOption2Array(animateOption as IAnimateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    return this.styleAttributeService.createAttributesAndIndices(\n      this.layer.getEncodedData(),\n      PointFillTriangulation,\n    );\n  }\n\n  public initModels(): IModel[] {\n    const {\n      unit = 'l7size',\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    const { version } = this.mapService;\n    if (\n      unit === 'meter' &&\n      version !== Version.L7MAP &&\n      version !== Version.GLOBEL &&\n      version !== Version.MAPBOX\n    ) {\n      this.isMeter = true;\n      this.calMeter2Coord();\n    }\n\n    return this.buildModels();\n  }\n\n  public calMeter2Coord() {\n    // @ts-ignore\n    const [minLng, minLat, maxLng, maxLat] = this.layer.getSource().extent;\n    const center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];\n\n    // @ts-ignore\n    const m1 = this.mapService.meterToCoord(center, [minLng, minLat]);\n    // @ts-ignore\n    const m2 = this.mapService.meterToCoord(center, [\n      maxLng === minLng ? maxLng + 0.1 : maxLng,\n      maxLat === minLat ? minLat + 0.1 : maxLat,\n    ]);\n    this.meter2coord = (m1 + m2) / 2;\n  }\n\n  public buildModels(): IModel[] {\n    // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n    const isGlobel = this.mapService.version === 'GLOBEL';\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointfill',\n        vertexShader: pointFillVert,\n        fragmentShader: pointFillFrag,\n        triangulation: isGlobel\n          ? GlobelPointFillTriangulation\n          : PointFillTriangulation,\n        // depth: { enable: false },\n        depth: { enable: isGlobel },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  protected animateOption2Array(option: IAnimateOption): number[] {\n    return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];\n  }\n  protected registerBuiltinAttributes() {\n    // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n    const isGlobel = this.mapService.version === 'GLOBEL';\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          let extrude;\n          // 地球模式\n          if (isGlobel) {\n            const [x, y, z] = vertex;\n            const n1 = vec3.fromValues(0, 0, 1);\n            const n2 = vec3.fromValues(x, 0, z);\n\n            const xzReg =\n              x >= 0 ? vec3.angle(n1, n2) : Math.PI * 2 - vec3.angle(n1, n2);\n\n            const yReg = Math.PI * 2 - Math.asin(y / 100);\n\n            const m = mat4.create();\n            mat4.rotateY(m, m, xzReg);\n            mat4.rotateX(m, m, yReg);\n\n            const v1 = vec3.fromValues(1, 1, 0);\n            vec3.transformMat4(v1, v1, m);\n            vec3.normalize(v1, v1);\n\n            const v2 = vec3.fromValues(-1, 1, 0);\n            vec3.transformMat4(v2, v2, m);\n            vec3.normalize(v2, v2);\n\n            const v3 = vec3.fromValues(-1, -1, 0);\n            vec3.transformMat4(v3, v3, m);\n            vec3.normalize(v3, v3);\n\n            const v4 = vec3.fromValues(1, -1, 0);\n            vec3.transformMat4(v4, v4, m);\n            vec3.normalize(v4, v4);\n\n            extrude = [...v1, ...v2, ...v3, ...v4];\n          } else {\n            // 平面模式\n            extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n          }\n\n          const extrudeIndex = (attributeIdx % 4) * 3;\n          return [\n            extrude[extrudeIndex],\n            extrude[extrudeIndex + 1],\n            extrude[extrudeIndex + 2],\n          ];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          // console.log('featureIdx', featureIdx, feature)\n          return Array.isArray(size)\n            ? [size[0] * this.meter2coord]\n            : [(size as number) * this.meter2coord];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'shape',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Shape',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { shape = 2 } = feature;\n          const shape2d = this.layer.getLayerConfig().shape2d as string[];\n          const shapeIndex = shape2d.indexOf(shape as string);\n          return [shapeIndex];\n        },\n      },\n    });\n  }\n}\n"],"file":"fill.js"}