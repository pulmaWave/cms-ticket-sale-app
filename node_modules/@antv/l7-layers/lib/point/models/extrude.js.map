{"version":3,"sources":["../../../src/point/models/extrude.ts"],"names":["ExtrudeModel","layer","getLayerConfig","animateOption","enable","speed","repeat","opacity","sourceColor","targetColor","opacityLinear","dir","lightEnable","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","gl","LUMINANCE","type","FLOAT","useLinearColor","sourceColorArr","targetColorArr","raiseCount","raiserepeat","u_r","u_globel","mapService","version","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_linearColor","u_sourceColor","u_targetColor","u_opacitylinear","Number","u_opacitylinear_dir","u_lightEnable","buildModels","depth","buildLayerModel","moduleName","vertexShader","pointExtrudeVert","fragmentShader","pointExtrudeFrag","triangulation","PointExtrudeTriangulation","blend","getBlend","cull","face","FRONT","BACK","destroy","isGlobel","styleAttributeService","registerStyleAttribute","name","AttributeType","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","buffersize","Array","isArray","STATIC_DRAW","normal","coordinates","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IEncodeFeature,\n  IModel,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { isBoolean, isNumber } from 'lodash';\nimport BaseModel, { styleOffset, styleSingle } from '../../core/BaseModel';\nimport { PointExtrudeTriangulation } from '../../core/triangulation';\nimport { lglt2xyz } from '../../earth/utils';\nimport { calculateCentroid } from '../../utils/geo';\nimport pointExtrudeFrag from '../shaders/extrude_frag.glsl';\nimport pointExtrudeVert from '../shaders/extrude_vert.glsl';\ninterface IPointLayerStyleOptions {\n  animateOption: IAnimateOption;\n  depth: boolean;\n  opacity: styleSingle;\n  offsets: styleOffset;\n\n  sourceColor?: string; // 可选参数、设置渐变色的起始颜色(all)\n  targetColor?: string; // 可选参数、设置渐变色的终点颜色(all)\n  opacityLinear?: {\n    enable: boolean;\n    dir: string;\n  };\n\n  lightEnable: boolean;\n}\nexport default class ExtrudeModel extends BaseModel {\n  private raiseCount: number = 0;\n  private raiserepeat: number = 0;\n  public getUninforms() {\n    const {\n      animateOption = {\n        enable: false,\n        speed: 0.01,\n        repeat: false,\n      },\n      opacity = 1,\n\n      sourceColor,\n      targetColor,\n\n      opacityLinear = {\n        enable: false,\n        dir: 'up',\n      },\n\n      lightEnable = true,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n      })\n    ) {\n      this.judgeStyleAttributes({\n        opacity,\n      });\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n\n    // 转化渐变色\n    let useLinearColor = 0; // 默认不生效\n    let sourceColorArr = [0, 0, 0, 0];\n    let targetColorArr = [0, 0, 0, 0];\n    if (sourceColor && targetColor) {\n      sourceColorArr = rgb2arr(sourceColor);\n      targetColorArr = rgb2arr(targetColor);\n      useLinearColor = 1;\n    }\n\n    if (this.raiseCount < 1 && this.raiserepeat > 0) {\n      if (animateOption.enable) {\n        const { speed = 0.01, repeat = false } = animateOption;\n        this.raiseCount += speed;\n        if (this.raiseCount >= 1) {\n          if (this.raiserepeat > 1) {\n            this.raiseCount = 0;\n            this.raiserepeat--;\n          } else {\n            this.raiseCount = 1;\n          }\n        }\n      }\n    }\n\n    return {\n      u_r: animateOption.enable && this.raiserepeat > 0 ? this.raiseCount : 1.0,\n      // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n      u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n      // u_opacity: opacity || 1.0,\n      // u_offsets: offsets || [0, 0],\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n\n      // 渐变色支持参数\n      u_linearColor: useLinearColor,\n      u_sourceColor: sourceColorArr,\n      u_targetColor: targetColorArr,\n\n      // 透明度渐变\n      u_opacitylinear: Number(opacityLinear.enable),\n      u_opacitylinear_dir: opacityLinear.dir === 'up' ? 1.0 : 0.0,\n\n      // 光照计算开关\n      u_lightEnable: Number(lightEnable),\n    };\n  }\n  public initModels(): IModel[] {\n    return this.buildModels();\n  }\n\n  public buildModels(): IModel[] {\n    // GAODE1.x GAODE2.x MAPBOX\n    const {\n      depth = true,\n      animateOption: { repeat = 1 },\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    this.raiserepeat = repeat;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointExtrude2',\n        vertexShader: pointExtrudeVert,\n        fragmentShader: pointExtrudeFrag,\n        triangulation: PointExtrudeTriangulation,\n        blend: this.getBlend(),\n        cull: {\n          enable: true,\n          face: this.mapService.version === 'MAPBOX' ? gl.FRONT : gl.BACK,\n        },\n        depth: {\n          enable: depth,\n        },\n        // primitive: gl.POINTS,\n      }),\n    ];\n  }\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n  protected registerBuiltinAttributes() {\n    // TODO: 判断当前的点图层的模型是普通地图模式还是地球模式\n    const isGlobel = this.mapService.version === 'GLOBEL';\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          if (size) {\n            let buffersize: number[] = [];\n            if (Array.isArray(size)) {\n              buffersize =\n                size.length === 2 ? [size[0], size[0], size[1]] : size;\n            }\n            if (!Array.isArray(size)) {\n              buffersize = [size, size, size];\n            }\n            return buffersize;\n          } else {\n            return [2, 2, 2];\n          }\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'pos',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Pos',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (feature: IEncodeFeature, featureIdx: number) => {\n          const coordinates = calculateCentroid(feature.coordinates);\n          if (isGlobel) {\n            // TODO: 在地球模式下需要将传入 shader 的经纬度转化成对应的 xyz 坐标\n            return lglt2xyz([coordinates[0], coordinates[1]]) as [\n              number,\n              number,\n              number,\n            ];\n          } else {\n            return [coordinates[0], coordinates[1], 0];\n          }\n        },\n      },\n    });\n  }\n}\n"],"file":"extrude.js"}