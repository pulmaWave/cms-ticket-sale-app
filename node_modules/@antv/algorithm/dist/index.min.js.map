{"version":3,"file":"index.min.js","mappings":"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","sources":["webpack://Algorithm/webpack/universalModuleDefinition","webpack://Algorithm/webpack/bootstrap","webpack://Algorithm/webpack/runtime/define property getters","webpack://Algorithm/webpack/runtime/hasOwnProperty shorthand","webpack://Algorithm/./src/adjacent-matrix.ts","webpack://Algorithm/./src/structs/linked-list.ts","webpack://Algorithm/./src/structs/queue.ts","webpack://Algorithm/./src/util.ts","webpack://Algorithm/./src/connected-component.ts","webpack://Algorithm/./src/degree.ts","webpack://Algorithm/./src/dfs.ts","webpack://Algorithm/./src/detect-cycle.ts","webpack://Algorithm/./node_modules/_tslib@2.3.1@tslib/tslib.es6.js","webpack://Algorithm/../src/is-type.ts","webpack://Algorithm/../src/is-function.ts","webpack://Algorithm/../src/is-array.ts","webpack://Algorithm/../src/keys.ts","webpack://Algorithm/../src/pull.ts","webpack://Algorithm/../src/uniq.ts","webpack://Algorithm/../src/pull-at.ts","webpack://Algorithm/../src/group-by.ts","webpack://Algorithm/../src/is-integer.ts","webpack://Algorithm/../src/to-degree.ts","webpack://Algorithm/../src/to-integer.ts","webpack://Algorithm/../src/to-radian.ts","webpack://Algorithm/../src/values.ts","webpack://Algorithm/../src/is-prototype.ts","webpack://Algorithm/../src/clone.ts","webpack://Algorithm/../src/measure-text-width.ts","webpack://Algorithm/../src/is-empty.ts","webpack://Algorithm/../src/pick.ts","webpack://Algorithm/../src/memoize.ts","webpack://Algorithm/../src/is-string.ts","webpack://Algorithm/../src/cache.ts","webpack://Algorithm/./src/dijkstra.ts","webpack://Algorithm/./src/floydWarshall.ts","webpack://Algorithm/./src/utils/vector.ts","webpack://Algorithm/./src/constants/time.ts","webpack://Algorithm/./src/utils/node-properties.ts","webpack://Algorithm/./src/utils/data-preprocessing.ts","webpack://Algorithm/./src/louvain.ts","webpack://Algorithm/./src/cosine-similarity.ts","webpack://Algorithm/./src/structs/union-find.ts","webpack://Algorithm/./src/structs/binary-heap.ts","webpack://Algorithm/./src/mts.ts","webpack://Algorithm/./src/gSpan/struct.ts","webpack://Algorithm/./src/gSpan/gSpan.ts","webpack://Algorithm/./src/gaddi.ts","webpack://Algorithm/./src/structs/stack.ts","webpack://Algorithm/./src/index.ts","webpack://Algorithm/./src/bfs.ts","webpack://Algorithm/./src/find-path.ts","webpack://Algorithm/./src/label-propagation.ts","webpack://Algorithm/./src/i-louvain.ts","webpack://Algorithm/./src/k-core.ts","webpack://Algorithm/./src/k-means.ts","webpack://Algorithm/./src/nodes-cosine-similarity.ts","webpack://Algorithm/./src/pageRank.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Algorithm\"] = factory();\n\telse\n\t\troot[\"Algorithm\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { GraphData, Matrix } from \"./types\";\n\nconst adjMatrix = (graphData: GraphData, directed?: boolean): Matrix[] => {\n  const { nodes, edges } = graphData;\n  const matrix: Matrix[] = [];\n  // map node with index in data.nodes\n  const nodeMap: {\n    [key: string]: number;\n  } = {};\n\n  if (!nodes) {\n    throw new Error(\"invalid nodes data!\");\n  }\n\n  if (nodes) {\n    nodes.forEach((node, i) => {\n      nodeMap[node.id] = i;\n      const row: number[] = [];\n      matrix.push(row);\n    });\n  }\n\n  if (edges) {\n    edges.forEach((edge) => {\n      const { source, target } = edge;\n      const sIndex = nodeMap[source as string];\n      const tIndex = nodeMap[target as string];\n      if ((!sIndex && sIndex !== 0) || (!tIndex && tIndex !== 0)) return;\n      matrix[sIndex][tIndex] = 1;\n      if (!directed) {\n        matrix[tIndex][sIndex] = 1;\n      }\n    });\n  }\n  return matrix;\n};\n\nexport default adjMatrix;\n","const defaultComparator = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * 链表中单个元素节点\n */\nexport class LinkedListNode {\n  public value;\n\n  public next: LinkedListNode;\n\n  constructor(value, next: LinkedListNode = null) {\n    this.value = value;\n    this.next = next;\n  }\n\n  toString(callback?: any) {\n    return callback ? callback(this.value) : `${this.value}`;\n  }\n}\n\nexport default class LinkedList {\n  public head: LinkedListNode;\n\n  public tail: LinkedListNode;\n\n  public compare: Function;\n\n  constructor(comparator = defaultComparator) {\n    this.head = null;\n    this.tail = null;\n    this.compare = comparator;\n  }\n\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n  prepend(value) {\n    // 在头部添加一个节点\n    const newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  }\n\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n  append(value) {\n    const newNode = new LinkedListNode(value);\n\n    // 如果不存在头节点，则将创建的新节点作为头节点\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n\n      return this;\n    }\n\n    // 将新节点附加到链表末尾\n    this.tail.next = newNode;\n    this.tail = newNode;\n\n    return this;\n  }\n\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n  delete(value): LinkedListNode {\n    if (!this.head) {\n      return null;\n    }\n\n    let deleteNode = null;\n\n    // 如果删除的是头部元素，则将next作为头元素\n    while (this.head && this.compare(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n\n    let currentNode = this.head;\n\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    }\n\n    // 检查尾部节点是否被删除\n    if (this.compare(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    return deleteNode;\n  }\n\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n  find({ value = undefined, callback = undefined }): LinkedListNode {\n    if (!this.head) {\n      return null;\n    }\n\n    let currentNode = this.head;\n\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      }\n\n      // 如果指定了 value，则按 value 查找\n      if (value !== undefined && this.compare(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      currentNode = currentNode.next;\n    }\n\n    return null;\n  }\n\n  /**\n   * 删除尾部节点\n   */\n  deleteTail() {\n    const deletedTail = this.tail;\n\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n\n    let currentNode = this.head;\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n\n    this.tail = currentNode;\n\n    return deletedTail;\n  }\n\n  /**\n   * 删除头部节点\n   */\n  deleteHead() {\n    if (!this.head) {\n      return null;\n    }\n\n    const deletedHead = this.head;\n\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    return deletedHead;\n  }\n\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n  fromArray(values) {\n    values.forEach((value) => this.append(value));\n    return this;\n  }\n\n  /**\n   * 将链表中的节点转成数组元素\n   */\n  toArray() {\n    const nodes = [];\n\n    let currentNode = this.head;\n\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  }\n\n  /**\n   * 反转链表中的元素节点\n   */\n  reverse() {\n    let currentNode = this.head;\n    let prevNode = null;\n    let nextNode = null;\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next;\n\n      // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n      currentNode.next = prevNode;\n\n      // 将 prevNode 和 currentNode 向前移动一步\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n\n    this.tail = this.head;\n    this.head = prevNode;\n  }\n\n  toString(callback = undefined) {\n    return this.toArray()\n      .map((node) => node.toString(callback))\n      .toString();\n  }\n}\n","import LinkedList from './linked-list';\n\nexport default class Queue {\n  public linkedList: LinkedList;\n\n  constructor() {\n    this.linkedList = new LinkedList();\n  }\n\n  /**\n   * 队列是否为空\n   */\n  public isEmpty() {\n    return !this.linkedList.head;\n  }\n\n  /**\n   * 读取队列头部的元素， 不删除队列中的元素\n   */\n  public peek() {\n    if (!this.linkedList.head) {\n      return null;\n    }\n    return this.linkedList.head.value;\n  }\n\n  /**\n   * 在队列的尾部新增一个元素\n   * @param value\n   */\n  public enqueue(value) {\n    this.linkedList.append(value);\n  }\n\n  /**\n   * 删除队列中的头部元素，如果队列为空，则返回 null\n   */\n  public dequeue() {\n    const removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  }\n\n  public toString(callback?: any) {\n    return this.linkedList.toString(callback);\n  }\n}\n","import { EdgeConfig, GraphData, Matrix } from './types'\n\n/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\nexport const getNeighbors = (nodeId: string, edges: EdgeConfig[] = [], type?: 'target' | 'source' | undefined): string[] => {\n  const currentEdges = edges.filter(edge => edge.source === nodeId || edge.target === nodeId)\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    const neighhborsConverter = (edge: EdgeConfig) => {\n      return edge.source === nodeId;\n    };\n    return currentEdges.filter(neighhborsConverter).map((edge) => edge.target);\n  }\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    const neighhborsConverter = (edge: EdgeConfig) => {\n      return edge.target === nodeId;\n    };\n    return currentEdges.filter(neighhborsConverter).map((edge) => edge.source);\n  }\n\n  // 若未指定 type ，则返回所有邻居\n  const neighhborsConverter = (edge: EdgeConfig) => {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n  return currentEdges.map(neighhborsConverter);\n}\n\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\nexport const getOutEdgesNodeId = (nodeId: string, edges: EdgeConfig[]) => {\n  return edges.filter(edge => edge.source === nodeId)\n}\n\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\nexport const getEdgesByNodeId = (nodeId: string, edges: EdgeConfig[]) => {\n  return edges.filter(edge => edge.source === nodeId || edge.target === nodeId)\n}\n\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\nexport const uniqueId = (index: number = 0) => {\n  const random1 = `${Math.random()}`.split('.')[1].substr(0, 5);\n  const random2 = `${Math.random()}`.split('.')[1].substr(0, 5);\n  return `${index}-${random1}${random2}`\n};\n","import { GraphData, NodeConfig } from \"./types\";\nimport { getNeighbors } from \"./util\";\n\n/**\n * Generate all connected components for an undirected graph\n * @param graph\n */\nexport const detectConnectedComponents = (graphData: GraphData): NodeConfig[][] => {\n  const { nodes = [], edges = [] } = graphData\n  const allComponents: NodeConfig[][] = [];\n  const visited = {};\n  const nodeStack: NodeConfig[] = [];\n\n  const getComponent = (node: NodeConfig) => {\n    nodeStack.push(node);\n    visited[node.id] = true;\n    const neighbors = getNeighbors(node.id, edges);\n    for (let i = 0; i < neighbors.length; ++i) {\n      const neighbor = neighbors[i];\n      if (!visited[neighbor]) {\n        const targetNode = nodes.filter(node => node.id === neighbor)\n        if (targetNode.length > 0) {\n          getComponent(targetNode[0]);\n        }\n      }\n    }\n  };\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!visited[node.id]) {\n      // 对于无向图进行dfs遍历，每一次调用后都得到一个连通分量\n      getComponent(node);\n      const component = [];\n      while (nodeStack.length > 0) {\n        component.push(nodeStack.pop());\n      }\n      allComponents.push(component);\n    }\n  }\n  return allComponents;\n}\n\n/**\n * Tarjan's Algorithm 复杂度  O(|V|+|E|)\n * For directed graph only\n * a directed graph is said to be strongly connected if \"every vertex is reachable from every other vertex\".\n * refer: http://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\n * @param graph\n * @return a list of strongly connected components\n */\nexport const detectStrongConnectComponents = (graphData: GraphData): NodeConfig[][] => {\n  const { nodes = [], edges = [] } = graphData\n  const nodeStack: NodeConfig[] = [];\n  const inStack = {}; // 辅助判断是否已经在stack中，减少查找开销\n  const indices = {};\n  const lowLink = {};\n  const allComponents: NodeConfig[][] = [];\n  let index = 0;\n\n  const getComponent = (node: NodeConfig) => {\n    // Set the depth index for v to the smallest unused index\n    indices[node.id] = index;\n    lowLink[node.id] = index;\n    index += 1;\n    nodeStack.push(node);\n    inStack[node.id] = true;\n\n    // 考虑每个邻接点\n    const neighbors = getNeighbors(node.id, edges, 'target').filter((n) => nodes.map(node => node.id).indexOf(n) > -1);\n    for (let i = 0; i < neighbors.length; i++) {\n      const targetNodeID = neighbors[i];\n      if (!indices[targetNodeID] && indices[targetNodeID] !== 0) {\n        const targetNode = nodes.filter(node => node.id === targetNodeID)\n        if (targetNode.length > 0) {\n          getComponent(targetNode[0]);\n        }\n        // tree edge\n        lowLink[node.id] = Math.min(lowLink[node.id], lowLink[targetNodeID]);\n      } else if (inStack[targetNodeID]) {\n        // back edge, target node is in the current SCC\n        lowLink[node.id] = Math.min(lowLink[node.id], indices[targetNodeID]);\n      }\n    }\n\n    // If node is a root node, generate an SCC\n    if (lowLink[node.id] === indices[node.id]) {\n      const component = [];\n      while (nodeStack.length > 0) {\n        const tmpNode = nodeStack.pop();\n        inStack[tmpNode.id] = false;\n        component.push(tmpNode);\n        if (tmpNode === node) break;\n      }\n      if (component.length > 0) {\n        allComponents.push(component);\n      }\n    }\n  };\n\n  for (const node of nodes) {\n    if (!indices[node.id] && indices[node.id] !== 0) {\n      getComponent(node);\n    }\n  }\n\n  return allComponents;\n}\n\nexport default function getConnectedComponents(graphData: GraphData, directed?: boolean): NodeConfig[][] {\n  if (directed) return detectStrongConnectComponents(graphData);\n  return detectConnectedComponents(graphData);\n}\n","import { GraphData, DegreeType } from \"./types\";\n\nconst degree = (graphData: GraphData): DegreeType => {\n  const degrees: DegreeType = {};\n  const { nodes = [], edges = [] } = graphData\n\n  nodes.forEach((node) => {\n    degrees[node.id] = {\n      degree: 0,\n      inDegree: 0,\n      outDegree: 0,\n    };\n  });\n\n  edges.forEach((edge) => {\n    degrees[edge.source].degree++;\n    degrees[edge.source].outDegree++;\n    degrees[edge.target].degree++;\n    degrees[edge.target].inDegree++;\n  });\n\n  return degrees;\n};\n\nexport default degree;\n\n/**\n * 获取指定节点的入度\n * @param graphData 图数据\n * @param nodeId 节点ID\n */\nexport const getInDegree = (graphData: GraphData, nodeId: string): number => {\n  const nodeDegree = degree(graphData)\n  if (nodeDegree[nodeId]) {\n    return degree(graphData)[nodeId].inDegree\n  }\n  return 0\n}\n\n/**\n * 获取指定节点的出度\n * @param graphData 图数据\n * @param nodeId 节点ID\n */\nexport const getOutDegree = (graphData: GraphData, nodeId: string): number => {\n  const nodeDegree = degree(graphData)\n  if (nodeDegree[nodeId]) {\n    return degree(graphData)[nodeId].outDegree\n  }\n  return 0\n}\n","import { IAlgorithmCallbacks, GraphData } from './types'\nimport { getNeighbors } from './util'\n\nfunction initCallbacks(callbacks: IAlgorithmCallbacks = {} as IAlgorithmCallbacks) {\n  const initiatedCallback = callbacks;\n\n  const stubCallback = () => {};\n\n  const allowTraversalCallback = (() => {\n    const seen = {};\n    return ({ next }) => {\n      if (!seen[next]) {\n        seen[next] = true;\n        return true;\n      }\n      return false;\n    };\n  })();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n\n  return initiatedCallback;\n}\n\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\nfunction depthFirstSearchRecursive(\n  graphData: GraphData,\n  currentNode: string,\n  previousNode: string,\n  callbacks: IAlgorithmCallbacks,\n) {\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode,\n  });\n\n  const { edges = [] } = graphData\n\n  getNeighbors(currentNode, edges, 'target').forEach((nextNode) => {\n    if (\n      callbacks.allowTraversal({\n        previous: previousNode,\n        current: currentNode,\n        next: nextNode,\n      })\n    ) {\n      depthFirstSearchRecursive(graphData, nextNode, currentNode, callbacks);\n    }\n  });\n\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode,\n  });\n}\n\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\nexport default function depthFirstSearch(\n  graphData: GraphData,\n  startNodeId: string,\n  callbacks?: IAlgorithmCallbacks,\n) {\n  depthFirstSearchRecursive(graphData, startNodeId, '', initCallbacks(callbacks));\n}\n","import dfs from './dfs';\nimport getConnectedComponents, { detectStrongConnectComponents } from './connected-component';\nimport { GraphData, IAlgorithmCallbacks, NodeConfig } from './types';\nimport { getNeighbors } from './util';\n\nconst detectDirectedCycle = (graphData: GraphData): {\n  [key: string]: string;\n} => {\n  let cycle: {\n    [key: string]: string;\n  } = null;\n\n  const { nodes = [] } = graphData\n\n  const dfsParentMap = {};\n\n  // 所有没有被访问的节点集合\n  const unvisitedSet = {};\n\n  // 正在被访问的节点集合\n  const visitingSet = {};\n\n  // 所有已经被访问过的节点集合\n  const visitedSet = {};\n\n  // 初始化 unvisitedSet\n  nodes.forEach((node) => {\n    unvisitedSet[node.id] = node;\n  });\n\n  const callbacks: IAlgorithmCallbacks = {\n    enter: ({ current: currentNode, previous: previousNode }) => {\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n\n        let currentCycleNode = currentNode;\n        let previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode];\n\n        // 更新 DSF parents 列表\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: ({ current: currentNode }) => {\n      // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: ({ next: nextNode }) => {\n      // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n      if (cycle) {\n        return false;\n      }\n\n      // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n      return !visitedSet[nextNode];\n    },\n  };\n\n  // 开始遍历节点\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    const firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n\n    dfs(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\nexport const detectAllUndirectedCycle = (graphData: GraphData, nodeIds?: string[], include = true) => {\n  const allCycles = [];\n  const components = getConnectedComponents(graphData, false);\n\n  // loop through all connected components\n  for (const component of components) {\n    if (!component.length) continue;\n    const root = component[0];\n    const rootId = root.id;\n\n    const stack = [root];\n    const parent = { [rootId]: root };\n    const used = { [rootId]: new Set() };\n\n    // walk a spanning tree to find cycles\n    while (stack.length > 0) {\n      const curNode = stack.pop();\n      const curNodeId = curNode.id;\n      const neighbors = getNeighbors(curNodeId, graphData.edges);\n      for (let i = 0; i < neighbors.length; i += 1) {\n        const neighborId = neighbors[i];\n        const neighbor = graphData.nodes.find(node => node.id === neighborId)\n        // const neighborId = neighbor.get('id');\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push({ [neighborId]: curNode });\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          let cycleValid = true;\n          const cyclePath = [neighbor, curNode];\n          let p = parent[curNodeId];\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent[p.id]) break;\n            else p = parent[p.id];\n          }\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n            if (cyclePath.findIndex((node) => nodeIds.indexOf(node.id) > -1) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex((node) => nodeIds.indexOf(node.id) > -1) > -1) {\n              cycleValid = false;\n            }\n          }\n\n          // 把 node list 形式转换为 cycle 的格式\n          if (cycleValid) {\n            const cycle = {};\n            for (let index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      }\n    }\n  }\n\n  return allCycles;\n};\n\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\nexport const detectAllDirectedCycle = (graphData: GraphData, nodeIds?: string[], include = true) => {\n  const path = []; // stack of nodes in current path\n  const blocked = new Set();\n  const B = []; // remember portions of the graph that yield no elementary circuit\n  const allCycles = [];\n  const idx2Node: {\n    [key: string]: NodeConfig;\n  } = {};\n  const node2Idx = {};\n\n  // 辅助函数： unblock all blocked nodes\n  const unblock = (thisNode: NodeConfig) => {\n    const stack = [thisNode];\n    while (stack.length > 0) {\n      const node = stack.pop();\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach((n) => {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  const circuit = (node: NodeConfig, start: NodeConfig, adjList) => {\n    let closed = false; // whether a path is closed\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n\n    const neighbors = adjList[node.id];\n    for (let i = 0; i < neighbors.length; i += 1) {\n      const neighbor = idx2Node[neighbors[i]];\n      if (neighbor === start) {\n        const cycle = {};\n        for (let index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (let i = 0; i < neighbors.length; i += 1) {\n        const neighbor = idx2Node[neighbors[i]];\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n    path.pop();\n    return closed;\n  };\n\n  const { nodes = [] } = graphData;\n\n  // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n    const nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  }\n  // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n  if (nodeIds && include) {\n    for (let i = 0; i < nodeIds.length; i++) {\n      const nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(node => node.id === nodeId);\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    }\n  }\n\n  // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n  const getMinComponentAdj = (components: NodeConfig[][]) => {\n    let minCompIdx;\n    let minIdx = Infinity;\n\n    // Find least component and the lowest node\n    for (let i = 0; i < components.length; i += 1) {\n      const comp = components[i];\n      for (let j = 0; j < comp.length; j++) {\n        const nodeIdx = node2Idx[comp[j].id];\n        if (nodeIdx < minIdx) {\n          minIdx = nodeIdx;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    const component = components[minCompIdx];\n    const adjList = [];\n    for (let i = 0; i < component.length; i += 1) {\n      const node = component[i];\n      adjList[node.id] = [];\n      for (const neighbor of getNeighbors(node.id, graphData.edges, 'target').filter((n) => component.map(c => c.id).indexOf(n) > -1)) {\n        // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push({ [node.id]: node });\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component,\n      adjList,\n      minIdx,\n    };\n  };\n\n  let nodeIdx = 0;\n  while (nodeIdx < nodes.length) {\n    const subgraphNodes = nodes.filter((n) => node2Idx[n.id] >= nodeIdx);\n    const sccs = detectStrongConnectComponents({ nodes: subgraphNodes, edges: graphData.edges }).filter(\n      (component) => component.length > 1,\n    );\n    if (sccs.length === 0) break;\n\n    const scc = getMinComponentAdj(sccs);\n    const { minIdx, adjList, component } = scc;\n    if (component.length > 1) {\n      component.forEach((node) => {\n        B[node.id] = new Set();\n      });\n      const startNode = idx2Node[minIdx];\n      // startNode 不在指定要包含的节点中，提前结束搜索\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return allCycles;\n};\n\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\nexport const detectAllCycles = (\n  graphData: GraphData,\n  directed?: boolean,\n  nodeIds?: string[],\n  include = true,\n) => {\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\n\nexport default detectDirectedCycle;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","var toString = {}.toString;\nvar isType = function (value, type) { return toString.call(value) === '[object ' + type + ']'; };\nexport default isType;\n//# sourceMappingURL=is-type.js.map","/**\n * 是否为函数\n * @param  {*} fn 对象\n * @return {Boolean}  是否函数\n */\nimport isType from './is-type';\nexport default (function (value) {\n    return isType(value, 'Function');\n});\n//# sourceMappingURL=is-function.js.map","import isType from './is-type';\nexport default (function (value) {\n    return Array.isArray ?\n        Array.isArray(value) :\n        isType(value, 'Array');\n});\n//# sourceMappingURL=is-array.js.map","import each from './each';\nimport isFunction from './is-function';\nvar keys = Object.keys ? function (obj) { return Object.keys(obj); } : function (obj) {\n    var result = [];\n    each(obj, function (value, key) {\n        if (!(isFunction(obj) && key === 'prototype')) {\n            result.push(key);\n        }\n    });\n    return result;\n};\nexport default keys;\n//# sourceMappingURL=keys.js.map","var arrPrototype = Array.prototype;\nvar splice = arrPrototype.splice;\nvar indexOf = arrPrototype.indexOf;\nvar pull = function (arr) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < values.length; i++) {\n        var value = values[i];\n        var fromIndex = -1;\n        while ((fromIndex = indexOf.call(arr, value)) > -1) {\n            splice.call(arr, fromIndex, 1);\n        }\n    }\n    return arr;\n};\nexport default pull;\n//# sourceMappingURL=pull.js.map","export default function uniq(arr, cache) {\n    if (cache === void 0) { cache = new Map(); }\n    var r = [];\n    if (Array.isArray(arr)) {\n        for (var i = 0, len = arr.length; i < len; i++) {\n            var item = arr[i];\n            // 加一个 cache，提升性能\n            if (!cache.has(item)) {\n                r.push(item);\n                cache.set(item, true);\n            }\n        }\n    }\n    return r;\n}\n//# sourceMappingURL=uniq.js.map","import isArrayLike from './is-array-like';\nvar splice = Array.prototype.splice;\nvar pullAt = function pullAt(arr, indexes) {\n    if (!isArrayLike(arr)) {\n        return [];\n    }\n    var length = arr ? indexes.length : 0;\n    var last = length - 1;\n    while (length--) {\n        var previous = void 0;\n        var index = indexes[length];\n        if (length === last || index !== previous) {\n            previous = index;\n            splice.call(arr, index, 1);\n        }\n    }\n    return arr;\n};\nexport default pullAt;\n//# sourceMappingURL=pull-at.js.map","import isArray from './is-array';\nimport isFunction from './is-function';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction groupBy(data, condition) {\n    if (!condition || !isArray(data)) {\n        return {};\n    }\n    var result = {};\n    // 兼容方法和 字符串的写法\n    var predicate = isFunction(condition) ? condition : function (item) { return item[condition]; };\n    var key;\n    for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        key = predicate(item);\n        if (hasOwnProperty.call(result, key)) {\n            result[key].push(item);\n        }\n        else {\n            result[key] = [item];\n        }\n    }\n    return result;\n}\nexport default groupBy;\n//# sourceMappingURL=group-by.js.map","import isNumber from './is-number';\nvar isInteger = Number.isInteger ? Number.isInteger : function (num) {\n    return isNumber(num) && num % 1 === 0;\n};\nexport default isInteger;\n//# sourceMappingURL=is-integer.js.map","var DEGREE = 180 / Math.PI;\nvar toDegree = function (radian) {\n    return DEGREE * radian;\n};\nexport default toDegree;\n//# sourceMappingURL=to-degree.js.map","export default parseInt;\n//# sourceMappingURL=to-integer.js.map","var RADIAN = Math.PI / 180;\nvar toRadian = function (degree) {\n    return RADIAN * degree;\n};\nexport default toRadian;\n//# sourceMappingURL=to-radian.js.map","import each from './each';\nimport isFunction from './is-function';\n// @ts-ignore\nvar values = Object.values ? function (obj) { return Object.values(obj); } : function (obj) {\n    var result = [];\n    each(obj, function (value, key) {\n        if (!(isFunction(obj) && key === 'prototype')) {\n            result.push(value);\n        }\n    });\n    return result;\n};\nexport default values;\n//# sourceMappingURL=values.js.map","var objectProto = Object.prototype;\nvar isPrototype = function (value) {\n    var Ctor = value && value.constructor;\n    var proto = (typeof Ctor === 'function' && Ctor.prototype) || objectProto;\n    return value === proto;\n};\nexport default isPrototype;\n//# sourceMappingURL=is-prototype.js.map","import isArray from './is-array';\nvar clone = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return obj;\n    }\n    var rst;\n    if (isArray(obj)) {\n        rst = [];\n        for (var i = 0, l = obj.length; i < l; i++) {\n            if (typeof obj[i] === 'object' && obj[i] != null) {\n                rst[i] = clone(obj[i]);\n            }\n            else {\n                rst[i] = obj[i];\n            }\n        }\n    }\n    else {\n        rst = {};\n        for (var k in obj) {\n            if (typeof obj[k] === 'object' && obj[k] != null) {\n                rst[k] = clone(obj[k]);\n            }\n            else {\n                rst[k] = obj[k];\n            }\n        }\n    }\n    return rst;\n};\nexport default clone;\n//# sourceMappingURL=clone.js.map","import { __spreadArrays } from \"tslib\";\nimport values from './values';\nimport memoize from './memoize';\nimport isString from './is-string';\nvar ctx;\n/**\n * 计算文本的宽度\n */\nexport default memoize(function (text, font) {\n    if (font === void 0) { font = {}; }\n    var fontSize = font.fontSize, fontFamily = font.fontFamily, fontWeight = font.fontWeight, fontStyle = font.fontStyle, fontVariant = font.fontVariant;\n    if (!ctx) {\n        ctx = document.createElement('canvas').getContext('2d');\n    }\n    ctx.font = [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ');\n    return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n    if (font === void 0) { font = {}; }\n    return __spreadArrays([text], values(font)).join('');\n});\n//# sourceMappingURL=measure-text-width.js.map","import isNil from './is-nil';\nimport isArrayLike from './is-array-like';\nimport getType from './get-type';\nimport isPrototype from './is-prototype';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction isEmpty(value) {\n    /**\n     * isEmpty(null) => true\n     * isEmpty() => true\n     * isEmpty(true) => true\n     * isEmpty(1) => true\n     * isEmpty([1, 2, 3]) => false\n     * isEmpty('abc') => false\n     * isEmpty({ a: 1 }) => false\n     */\n    if (isNil(value)) {\n        return true;\n    }\n    if (isArrayLike(value)) {\n        return !value.length;\n    }\n    var type = getType(value);\n    if (type === 'Map' || type === 'Set') {\n        return !value.size;\n    }\n    if (isPrototype(value)) {\n        return !Object.keys(value).length;\n    }\n    for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport default isEmpty;\n//# sourceMappingURL=is-empty.js.map","import each from './each';\nimport isPlainObject from './is-plain-object';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport default (function (object, keys) {\n    if (object === null || !isPlainObject(object)) {\n        return {};\n    }\n    var result = {};\n    each(keys, function (key) {\n        if (hasOwnProperty.call(object, key)) {\n            result[key] = object[key];\n        }\n    });\n    return result;\n});\n//# sourceMappingURL=pick.js.map","import isFunction from './is-function';\n/**\n * _.memoize(calColor);\n * _.memoize(calColor, (...args) => args[0]);\n * @param f\n * @param resolver\n */\nexport default (function (f, resolver) {\n    if (!isFunction(f)) {\n        throw new TypeError('Expected a function');\n    }\n    var memoized = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key\n        var key = resolver ? resolver.apply(this, args) : args[0];\n        var cache = memoized.cache;\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        var result = f.apply(this, args);\n        // 缓存起来\n        cache.set(key, result);\n        return result;\n    };\n    memoized.cache = new Map();\n    return memoized;\n});\n//# sourceMappingURL=memoize.js.map","import isType from './is-type';\nexport default (function (str) {\n    return isType(str, 'String');\n});\n//# sourceMappingURL=is-string.js.map","/**\n * k-v 存储\n */\nvar default_1 = /** @class */ (function () {\n    function default_1() {\n        this.map = {};\n    }\n    default_1.prototype.has = function (key) {\n        return this.map[key] !== undefined;\n    };\n    default_1.prototype.get = function (key, def) {\n        var v = this.map[key];\n        return v === undefined ? def : v;\n    };\n    default_1.prototype.set = function (key, value) {\n        this.map[key] = value;\n    };\n    default_1.prototype.clear = function () {\n        this.map = {};\n    };\n    default_1.prototype.delete = function (key) {\n        delete this.map[key];\n    };\n    default_1.prototype.size = function () {\n        return Object.keys(this.map).length;\n    };\n    return default_1;\n}());\nexport default default_1;\n//# sourceMappingURL=cache.js.map","import { isArray } from '@antv/util';\nimport { GraphData, NodeConfig, EdgeConfig } from './types';\nimport { getOutEdgesNodeId, getEdgesByNodeId } from './util';\n\nconst minVertex = (\n  D: { [key: string]: number },\n  nodes: NodeConfig[],\n  marks: { [key: string]: boolean },\n): NodeConfig => {\n  // 找出最小的点\n  let minDis = Infinity;\n  let minNode;\n  for (let i = 0; i < nodes.length; i++) {\n    const nodeId = nodes[i].id;\n    if (!marks[nodeId] && D[nodeId] <= minDis) {\n      minDis = D[nodeId];\n      minNode = nodes[i];\n    }\n  }\n  return minNode;\n};\n\nconst dijkstra = (\n  graphData: GraphData,\n  source: string,\n  directed?: boolean,\n  weightPropertyName?: string,\n) => {\n  const { nodes = [], edges = [] } = graphData;\n  const nodeIds = [];\n  const marks = {};\n  const D = {};\n  const prevs = {}; // key: 顶点, value: 顶点的前驱点数组（可能有多条等长的最短路径）\n  nodes.forEach((node, i) => {\n    const id = node.id;\n    nodeIds.push(id);\n    D[id] = Infinity;\n    if (id === source) D[id] = 0;\n  });\n\n  const nodeNum = nodes.length;\n  for (let i = 0; i < nodeNum; i++) {\n    // Process the vertices\n    const minNode = minVertex(D, nodes, marks);\n    const minNodeId = minNode.id;\n    marks[minNodeId] = true;\n\n    if (D[minNodeId] === Infinity) continue; // Unreachable vertices cannot be the intermediate point\n\n    let relatedEdges: EdgeConfig[] = [];\n    if (directed) relatedEdges = getOutEdgesNodeId(minNodeId, edges);\n    else relatedEdges = getEdgesByNodeId(minNodeId, edges);\n\n    relatedEdges.forEach(edge => {\n      const edgeTarget = edge.target;\n      const edgeSource = edge.source;\n      const w = edgeTarget === minNodeId ? edgeSource : edgeTarget;\n      const weight = weightPropertyName && edge[weightPropertyName] ? edge[weightPropertyName] : 1;\n      if (D[w] > D[minNode.id] + weight) {\n        D[w] = D[minNode.id] + weight;\n        prevs[w] = [minNode.id];\n      } else if (D[w] === D[minNode.id] + weight) {\n        prevs[w].push(minNode.id);\n      }\n    });\n  }\n\n  prevs[source] = [source];\n  // 每个节点存可能存在多条最短路径\n  const paths = {};\n  for (const target in D) {\n    if (D[target] !== Infinity) {\n      findAllPaths(source, target, prevs, paths);\n    }\n  }\n\n  // 兼容之前单路径\n  const path = {};\n  for (const target in paths) {\n    path[target] = paths[target][0];\n  }\n  return { length: D, path, allPath: paths };\n};\n\nexport default dijkstra;\n\nfunction findAllPaths(source, target, prevs, foundPaths) {\n  if (source === target) {\n    return [source];\n  }\n  if (foundPaths[target]) {\n    return foundPaths[target];\n  }\n  const paths = [];\n  for (let prev of prevs[target]) {\n    const prevPaths = findAllPaths(source, prev, prevs, foundPaths);\n    if (!prevPaths) return;\n    for (let prePath of prevPaths) {\n      if (isArray(prePath)) paths.push([...prePath, target]);\n      else paths.push([prePath, target]);\n    }\n  }\n  foundPaths[target] = paths;\n  return foundPaths[target];\n}\n","import getAdjMatrix from \"./adjacent-matrix\";\nimport { GraphData, Matrix } from \"./types\";\n\nconst floydWarshall = (graphData: GraphData, directed?: boolean) => {\n  const adjacentMatrix = getAdjMatrix(graphData, directed);\n\n  const dist: Matrix[] = [];\n  const size = adjacentMatrix.length;\n  for (let i = 0; i < size; i += 1) {\n    dist[i] = [];\n    for (let j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  }\n  // floyd\n  for (let k = 0; k < size; k += 1) {\n    for (let i = 0; i < size; i += 1) {\n      for (let j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n  return dist;\n};\n\nexport default floydWarshall;\n","\n/**\n * 向量运算\n */\nimport { clone } from '@antv/util';\n\nclass Vector {\n  arr: number[];\n\n  constructor(arr) {\n    this.arr = arr;\n  }\n\n  getArr() {\n    return this.arr || [];\n  }\n\n  add(otherVector) {\n    const otherArr = otherVector.arr;\n    if (!this.arr?.length) {\n      return new Vector(otherArr);\n    }\n    if (!otherArr?.length) {\n      return new Vector(this.arr);\n    }\n    if (this.arr.length === otherArr.length) {\n      let res = [];\n      for (let index in this.arr) {\n        res[index] = this.arr[index] + otherArr[index];\n      }\n      return new Vector(res);\n    }\n  }\n\n  subtract(otherVector) {\n    const otherArr = otherVector.arr;\n    if (!this.arr?.length) {\n      return new Vector(otherArr);\n    }\n    if (!otherArr?.length) {\n      return new Vector(this.arr);\n    }\n    if (this.arr.length === otherArr.length) {\n      let res = [];\n      for (let index in this.arr) {\n        res[index] = this.arr[index] - otherArr[index];\n      }\n      return new Vector(res);\n    }\n  }\n\n  avg(length) {\n    let res = [];\n    if (length !== 0) {\n      for (let index in this.arr) {\n        res[index] = this.arr[index] / length;\n      }\n    }\n    return new Vector(res);\n  }\n\n  negate() {\n    let res = [];\n    for (let index in this.arr) {\n      res[index] = - this.arr[index];\n    }\n    return new Vector(res);\n  }\n\n  // 平方欧式距离\n  squareEuclideanDistance(otherVector) {\n    const otherArr = otherVector.arr;\n    if (!this.arr?.length || !otherArr?.length) {\n      return 0;\n    }\n    if (this.arr.length === otherArr.length) {\n      let res = 0;\n      for (let index in this.arr) {\n        res += Math.pow(this.arr[index] - otherVector.arr[index], 2);\n      }\n      return res;\n    }\n  }\n\n  // 欧式距离\n  euclideanDistance(otherVector) {\n    const otherArr = otherVector.arr;\n    if (!this.arr?.length || !otherArr?.length) {\n      return 0;\n    }\n    if (this.arr.length === otherArr.length) {\n      let res = 0;\n      for (let index in this.arr) {\n        res += Math.pow(this.arr[index] - otherVector.arr[index], 2);\n      }\n      return Math.sqrt(res);\n    } else {\n      console.error('The two vectors are unequal in length.')\n    }\n  }\n\n  // 归一化处理\n  normalize() {\n    let res = [];\n    const cloneArr = clone(this.arr);\n    cloneArr.sort((a, b) => a - b);\n    const max = cloneArr[cloneArr.length - 1];\n    const min = cloneArr[0];\n    for (let index in this.arr) {\n      res[index] = (this.arr[index] - min) / (max - min);\n    }\n    return new Vector(res);\n  }\n\n  // 2范数 or 模长\n  norm2() {\n    if (!this.arr?.length) {\n      return 0;\n    }\n    let res = 0;\n      for (let index in this.arr) {\n        res += Math.pow(this.arr[index], 2);\n      }\n    return Math.sqrt(res);\n  }\n\n  // 两个向量的点积\n  dot(otherVector) {\n    const otherArr = otherVector.arr;\n    if (!this.arr?.length || !otherArr?.length) {\n      return 0;\n    }\n    if (this.arr.length === otherArr.length) {\n      let res = 0;\n      for (let index in this.arr) {\n        res += this.arr[index] * otherVector.arr[index];\n      }\n      return res;\n    } else {\n      console.error('The two vectors are unequal in length.')\n    }\n  }\n\n  // 两个向量比较\n  equal(otherVector) {\n    const otherArr = otherVector.arr;\n    if (this.arr?.length !== otherArr?.length) {\n      return false;\n    }\n    for (let index in this.arr) {\n      if (this.arr[index] !== otherArr[index]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport default Vector;\n","export const secondReg = /^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2})$/;\nexport const dateReg = /^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/;\n","import { NodeConfig } from '../types';\nimport { secondReg, dateReg } from '../constants/time';\n\n// 获取所有属性并排序\nexport const getAllSortProperties = (nodes: NodeConfig[] = [], n: number = 100) => {\n  const propertyKeyInfo = {};\n  nodes.forEach(node => {\n    if (!node.properties) {\n      return;\n    }\n    Object.keys(node.properties).forEach(propertyKey => {\n      // 目前过滤只保留可以转成数值型的或日期型的, todo: 统一转成one-hot特征向量或者embedding\n      if (propertyKey === 'id' || !`${node.properties[propertyKey]}`.match(secondReg) && \n        !`${node.properties[propertyKey]}`.match(dateReg) && \n        isNaN(Number(node.properties[propertyKey]))) {\n        if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n            delete propertyKeyInfo[propertyKey];\n        }\n        return;\n      }\n      if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n        propertyKeyInfo[propertyKey] += 1;\n      } else {\n        propertyKeyInfo[propertyKey] = 1;\n      }\n    })\n  })\n\n  // 取top50的属性\n  const sortKeys = Object.keys(propertyKeyInfo).sort((a,b) => propertyKeyInfo[b] - propertyKeyInfo[a]);\n  return sortKeys.length < n ? sortKeys : sortKeys.slice(0, n);\n}\n  \nconst processProperty = (properties, propertyKeys) => propertyKeys.map(key => {\n  if (properties.hasOwnProperty(key)) {\n    // 可以转成数值的直接转成数值\n    if (!isNaN(Number(properties[key]))) {\n      return Number(properties[key]);\n    }\n    // 时间型的转成时间戳\n    if (properties[key].match(secondReg) || properties[key].match(dateReg)) {\n      // @ts-ignore\n      return Number(Date.parse(new Date(properties[key]))) / 1000;\n    }\n  }\n  return 0;\n})\n  \n// 获取属性特征权重\nexport const getPropertyWeight = (nodes: NodeConfig[]) => {\n  const propertyKeys = getAllSortProperties(nodes);\n  let allPropertiesWeight = [];\n  for (let i = 0; i < nodes.length; i++) {\n    allPropertiesWeight[i] = processProperty(nodes[i].properties, propertyKeys);\n  }\n  return allPropertiesWeight;\n}\n\n// 获取所有节点的属性集合\nexport const getAllProperties = (nodes, key='properties') => {\n  const allProperties = [];\n  nodes.forEach(node => {\n    if (!node.properties) {\n      return;\n    }\n    allProperties.push(node[key]);\n  })\n  return allProperties;\n}\n\nexport default {\n  getAllSortProperties,\n  getPropertyWeight,\n  getAllProperties\n}\n","import { isEmpty, uniq } from '@antv/util';\nimport { PlainObject } from '../types';\n\n/**\n * 获取数据中所有的属性及其对应的值\n * @param dataList 数据集\n * @param involvedKeys 参与计算的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\nexport const getAllKeyValueMap = (dataList: PlainObject[], involvedKeys?: string[], uninvolvedKeys?: string[]) => {\n  let keys = [];\n  // 指定了参与计算的keys时，使用指定的keys\n  if (involvedKeys?.length) {\n    keys = involvedKeys;\n  } else {\n    // 未指定抽取的keys时，提取数据中所有的key\n    dataList.forEach(data => {\n      keys = keys.concat(Object.keys(data));\n    })\n    keys = uniq(keys);\n  }\n  // 获取所有值非空的key的value数组\n  const allKeyValueMap = {};\n  keys.forEach(key => {\n    let value = [];\n    dataList.forEach(data => {\n      if (data[key] !== undefined && data[key] !== '') {\n        value.push(data[key]);\n      }\n    })\n    if (value.length && !uninvolvedKeys?.includes(key)) {\n      allKeyValueMap[key] = uniq(value);\n    }\n  })\n\n  return allKeyValueMap;\n}\n\n/**\n * one-hot编码：数据特征提取\n * @param dataList 数据集\n * @param involvedKeys 参与计算的的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\nexport const oneHot = (dataList: PlainObject[], involvedKeys?: string[], uninvolvedKeys?: string[]) => {\n  // 获取数据中所有的属性及其对应的值\n  const allKeyValueMap = getAllKeyValueMap(dataList, involvedKeys, uninvolvedKeys);\n  const oneHotCode = [];\n  // 对数据进行one-hot编码\n  dataList.forEach((data, index) => {\n    let code = [];\n    Object.keys(allKeyValueMap).forEach(key => {\n      const keyValue = data[key];\n      const allKeyValue = allKeyValueMap[key];\n      const valueIndex = allKeyValue.findIndex(value => keyValue === value);\n      let subCode = [];\n      for(let i = 0; i < allKeyValue.length; i++) {\n        if (i === valueIndex) {\n          subCode.push(1);\n        } else {\n          subCode.push(0);\n        }\n      }\n      code = code.concat(subCode);\n    })\n    oneHotCode[index] = code;\n  })\n  return oneHotCode;\n}\n\nexport default {\n  getAllKeyValueMap,\n  oneHot,\n}\n","import { clone } from '@antv/util';\nimport getAdjMatrix from './adjacent-matrix';\nimport { NodeConfig, ClusterData, GraphData, ClusterMap } from './types';\nimport Vector from './utils/vector';\nimport { getAllProperties } from './utils/node-properties';\nimport { oneHot } from './utils/data-preprocessing';\n\nconst getModularity = (\n  nodes: NodeConfig[],\n  adjMatrix: number[][],\n  ks: number[],\n  m: number\n) => {\n  const length = adjMatrix.length;\n  const param = 2 * m;\n  let modularity = 0;\n  for (let i = 0; i < length; i++) {\n    const clusteri = nodes[i].clusterId;\n    for (let j = 0; j < length; j++) {\n      const clusterj = nodes[j].clusterId;\n      if (clusteri !== clusterj) continue;\n      const entry = adjMatrix[i][j] || 0;\n      const ki = ks[i] || 0;\n      const kj = ks[j] || 0;\n      modularity += (entry - ki * kj / param);\n    }\n  }\n  modularity *= (1 / param);\n  return modularity;\n}\n\n// 模块惯性度，衡量属性相似度\nconst getInertialModularity = (\n  nodes: NodeConfig[] = [],\n  allPropertiesWeight: number[][],\n) => {\n  const length = nodes.length;\n  let totalProperties = new Vector([]);\n  for (let i = 0; i < length; i++) {\n    totalProperties = totalProperties.add(new Vector(allPropertiesWeight[i]));\n  }\n  // 均值向量\n  const avgProperties = totalProperties.avg(length);\n\n  avgProperties.normalize();\n  // 节点集合的方差: 节点v与均值向量的平方欧式距离之和\n  let variance: number = 0;\n  for (let i = 0; i < length; i++) {\n    const propertiesi = new Vector(allPropertiesWeight[i]);\n    const squareEuclideanDistance = propertiesi.squareEuclideanDistance(avgProperties);\n    variance += squareEuclideanDistance;\n  }\n\n  // 任意两点间的欧式平方距离\n  let squareEuclideanDistanceInfo = [];\n  nodes.forEach(() => {\n    squareEuclideanDistanceInfo.push([]);\n  });\n  for (let i = 0; i < length; i++) {\n    const propertiesi = new Vector(allPropertiesWeight[i]);\n    nodes[i]['clusterInertial'] = 0;\n    for (let j = 0; j < length; j++) {\n      if ( i === j) {\n        squareEuclideanDistanceInfo[i][j] = 0;\n        continue;\n      }\n      const propertiesj = new Vector(allPropertiesWeight[j]);\n      squareEuclideanDistanceInfo[i][j] = propertiesi.squareEuclideanDistance(propertiesj);\n      nodes[i]['clusterInertial'] += squareEuclideanDistanceInfo[i][j];\n    }\n  }\n\n  // 计算模块惯性度\n  let inertialModularity: number = 0;\n  const param = 2 * length * variance;\n  for (let i = 0; i < length; i++) {\n    const clusteri = nodes[i].clusterId;\n    for (let j = 0; j < length; j++) {\n      const clusterj = nodes[j].clusterId;\n      if ( i === j || clusteri !== clusterj) continue;\n      const inertial = (nodes[i].clusterInertial * nodes[j].clusterInertial) / Math.pow(param, 2) - squareEuclideanDistanceInfo[i][j] / param;\n      inertialModularity += inertial;\n    }\n  }\n  return Number(inertialModularity.toFixed(4));\n}\n\n\n/**\n * 社区发现 louvain 算法\n * @param graphData 图数据\n * @param directed 是否有向图，默认为 false\n * @param weightPropertyName 权重的属性字段\n * @param threshold 差值阈值\n * @param inertialModularity 是否使用惯性模块度（即节点属性相似性）\n */\nconst louvain = (\n  graphData: GraphData,\n  directed: boolean = false,\n  weightPropertyName: string = 'weight',\n  threshold: number = 0.0001,\n  inertialModularity: boolean = false,\n  inertialWeight: number = 1,\n): ClusterData => {\n  // the origin data\n  const { nodes = [], edges = [] } = graphData;\n\n  let allPropertiesWeight = [];\n  if (inertialModularity) {\n    nodes.forEach((node, index) => {\n      node.properties = node.properties || {};\n      node.originIndex = index;\n    })\n  \n    let nodeTypeInfo = [];\n    if (nodes.every(node => node.hasOwnProperty('nodeType'))) {\n      nodeTypeInfo = Array.from(new Set(nodes.map(node => node.nodeType)));\n      nodes.forEach(node => {\n        node.properties.nodeType = nodeTypeInfo.findIndex(nodeType => nodeType === node.nodeType);\n      })\n    }\n    // 所有节点属性集合\n    const properties = getAllProperties(nodes);\n    // 所有节点属性one-hot特征向量集合\n    allPropertiesWeight = oneHot(properties);\n  }\n \n  let uniqueId = 1;\n\n  const clusters: ClusterMap = {};\n  const nodeMap = {};\n  // init the clusters and nodeMap\n  nodes.forEach((node, i) => {\n    const cid: string = String(uniqueId++);\n    node.clusterId = cid;\n    clusters[cid] = {\n      id: cid,\n      nodes: [node]\n    };\n    nodeMap[node.id] = {\n      node,\n      idx: i\n    };\n  });\n  // the adjacent matrix of calNodes inside clusters\n  const adjMatrix = getAdjMatrix(graphData, directed);\n  // the sum of each row in adjacent matrix\n  const ks = [];\n  /**\n   * neighbor nodes (id for key and weight for value) for each node\n   * neighbors = {\n   *  id(node_id): { id(neighbor_1_id): weight(weight of the edge), id(neighbor_2_id): weight(weight of the edge), ... },\n   *  ...\n   * }\n   */\n  const neighbors = {};\n  // the sum of the weights of all edges in the graph\n  let m = 0;\n  adjMatrix.forEach((row, i) => {\n    let k = 0;\n    const iid = nodes[i].id;\n    neighbors[iid] = {};\n    row.forEach((entry, j) => {\n      if (!entry) return;\n      k += entry;\n      const jid = nodes[j].id;\n      neighbors[iid][jid] = entry;\n      m += entry;\n    });\n    ks.push(k);\n  });\n\n  m /= 2;\n\n  let totalModularity = Infinity;\n  let previousModularity = Infinity;\n  let iter = 0;\n\n  let finalNodes = [];\n  let finalClusters = {};\n  while (true) {\n    if (inertialModularity && nodes.every(node => node.hasOwnProperty('properties'))) {\n      totalModularity = getModularity(nodes, adjMatrix, ks, m) + getInertialModularity(nodes, allPropertiesWeight) * inertialWeight;\n    } else {\n      totalModularity = getModularity(nodes, adjMatrix, ks, m);\n    }\n   \n    // 第一次迭代previousModularity直接赋值\n    if (iter === 0) {\n      previousModularity = totalModularity;\n      finalNodes = nodes;\n      finalClusters = clusters;\n    }\n\n    const increaseWithinThreshold = totalModularity > 0 && totalModularity > previousModularity && totalModularity - previousModularity < threshold;\n    // 总模块度增加才更新最优解\n    if (totalModularity > previousModularity) {\n      finalNodes = nodes.map(node => ({\n        node,\n        clusterId: node.clusterId\n      }));\n      finalClusters = clone(clusters);\n      previousModularity = totalModularity;\n    }\n\n    // whether to terminate the iterations\n    if ( increaseWithinThreshold || iter > 100) {\n      break;\n    };\n    iter++;\n    // pre compute some values for current clusters\n    Object.keys(clusters).forEach(clusterId => {\n      // sum of weights of edges to nodes in cluster\n      let sumTot = 0;\n      edges.forEach(edge => {\n        const { source, target } = edge;\n        const sourceClusterId = nodeMap[source].node.clusterId;\n        const targetClusterId = nodeMap[target].node.clusterId;\n        if ((sourceClusterId === clusterId && targetClusterId !== clusterId)\n          || (targetClusterId === clusterId && sourceClusterId !== clusterId)) {\n          sumTot = sumTot + (edge[weightPropertyName] as number || 1);\n        }\n      });\n      clusters[clusterId].sumTot = sumTot;\n    });\n\n\n    // move the nodes to increase the delta modularity\n    nodes.forEach((node, i) => {\n      const selfCluster = clusters[node.clusterId as string];\n      let bestIncrease = 0;\n      let bestCluster;\n\n      const commonParam = ks[i] / (2 * m);\n\n      // sum of weights of edges from node to nodes in cluster\n      let kiin = 0;\n      const selfClusterNodes = selfCluster.nodes;\n      selfClusterNodes.forEach(scNode => {\n        const scNodeIdx = nodeMap[scNode.id].idx;\n        kiin += adjMatrix[i][scNodeIdx] || 0;\n      });\n      // the modurarity for **removing** the node i from the origin cluster of node i\n      const removeModurarity = kiin - selfCluster.sumTot * commonParam;\n      // nodes for **removing** node i into this neighbor cluster\n      const selfClusterNodesAfterRemove = selfClusterNodes.filter(scNode => scNode.id !== node.id);\n      let propertiesWeightRemove = [];\n      selfClusterNodesAfterRemove.forEach((nodeRemove, index) => {\n        propertiesWeightRemove[index] = allPropertiesWeight[nodeRemove.originIndex];\n      })\n      // the inertialModularity for **removing** the node i from the origin cluster of node i\n      const removeInertialModularity = getInertialModularity(selfClusterNodesAfterRemove, allPropertiesWeight) * inertialWeight;\n\n      // the neightbors of the node\n      const nodeNeighborIds = neighbors[node.id];\n      Object.keys(nodeNeighborIds).forEach(neighborNodeId => {\n        const neighborNode = nodeMap[neighborNodeId].node;\n        const neighborClusterId = neighborNode.clusterId;\n\n        // if the node and the neighbor of node are in the same cluster, reutrn\n        if (neighborClusterId === node.clusterId) return;\n        const neighborCluster = clusters[neighborClusterId];\n        const clusterNodes = neighborCluster.nodes;\n\n        // if the cluster is empty, remove the cluster and return\n        if (!clusterNodes || !clusterNodes.length) return;\n\n        // sum of weights of edges from node to nodes in cluster\n        let neighborClusterKiin = 0;\n        clusterNodes.forEach(cNode => {\n          const cNodeIdx = nodeMap[cNode.id].idx;\n          neighborClusterKiin += adjMatrix[i][cNodeIdx] || 0;\n        });\n\n        // the modurarity for **adding** node i into this neighbor cluster\n        const addModurarity = neighborClusterKiin - neighborCluster.sumTot * commonParam;\n        // nodes for **adding** node i into this neighbor cluster\n        const clusterNodesAfterAdd= clusterNodes.concat([node]);\n        let propertiesWeightAdd = [];\n        clusterNodesAfterAdd.forEach((nodeAdd, index) => {\n          propertiesWeightAdd[index] = allPropertiesWeight[nodeAdd.originIndex];\n        })\n        // the inertialModularity for **adding** node i into this neighbor cluster\n        const addInertialModularity = getInertialModularity(clusterNodesAfterAdd, allPropertiesWeight) * inertialWeight;\n\n        // the increase modurarity is the difference between addModurarity and removeModurarity\n        let increase = addModurarity - removeModurarity;\n        if (inertialModularity) {\n          increase = (addModurarity + addInertialModularity) - (removeModurarity + removeInertialModularity);\n        }\n\n        // find the best cluster to move node i into\n        if (increase > bestIncrease) {\n          bestIncrease = increase;\n          bestCluster = neighborCluster;\n        }\n      });\n\n      // if found a best cluster to move into\n      if (bestIncrease > 0) {\n        bestCluster.nodes.push(node);\n        const previousClusterId = node.clusterId;\n        node.clusterId = bestCluster.id;\n        // move the node to the best cluster\n        const nodeInSelfClusterIdx = selfCluster.nodes.indexOf(node);\n        // remove from origin cluster\n        selfCluster.nodes.splice(nodeInSelfClusterIdx, 1);\n        // update sumTot for clusters\n        // sum of weights of edges to nodes in cluster\n        let neighborClusterSumTot = 0;\n        let selfClusterSumTot = 0;\n        edges.forEach(edge => {\n          const { source, target } = edge;\n          const sourceClusterId = nodeMap[source].node.clusterId;\n          const targetClusterId = nodeMap[target].node.clusterId;\n          if ((sourceClusterId === bestCluster.id && targetClusterId !== bestCluster.id)\n            || (targetClusterId === bestCluster.id && sourceClusterId !== bestCluster.id)) {\n            neighborClusterSumTot = neighborClusterSumTot + (edge[weightPropertyName] as number || 1);\n          }\n          if ((sourceClusterId === previousClusterId && targetClusterId !== previousClusterId)\n            || (targetClusterId === previousClusterId && sourceClusterId !== previousClusterId)) {\n            selfClusterSumTot = selfClusterSumTot + (edge[weightPropertyName] as number || 1);\n          }\n        });\n\n        // the nodes of the clusters to move into and remove are changed, update their sumTot\n        bestCluster.sumTot = neighborClusterSumTot;\n        selfCluster.sumTot = selfClusterSumTot;\n      }\n    });\n  }\n\n  // delete the empty clusters, assign increasing clusterId\n  const newClusterIdMap = {}\n  let clusterIdx = 0;\n  Object.keys(finalClusters).forEach((clusterId) => {\n    const cluster = finalClusters[clusterId];\n    if (!cluster.nodes || !cluster.nodes.length) {\n      delete finalClusters[clusterId];\n      return;\n    }\n    const newId = String(clusterIdx + 1);\n    if (newId === clusterId) {\n      return;\n    }\n    cluster.id = newId;\n    cluster.nodes = cluster.nodes.map(item => ({ id: item.id, clusterId: newId }));\n    finalClusters[newId] = cluster;\n    newClusterIdMap[clusterId] = newId;\n    delete finalClusters[clusterId];\n    clusterIdx ++;\n  });\n  // restore node clusterId\n  finalNodes.forEach(nodeInfo => {\n    const { node, clusterId } = nodeInfo;\n    node.clusterId = clusterId;\n    if (node.clusterId && newClusterIdMap[node.clusterId]) node.clusterId = newClusterIdMap[node.clusterId]\n  })\n  // get the cluster edges\n  const clusterEdges = [];\n  const clusterEdgeMap = {};\n  edges.forEach(edge => {\n    const { source, target } = edge;\n    const weight = edge[weightPropertyName] || 1;\n    const sourceClusterId = nodeMap[source].node.clusterId;\n    const targetClusterId = nodeMap[target].node.clusterId;\n    const newEdgeId = `${sourceClusterId}---${targetClusterId}`;\n    if (clusterEdgeMap[newEdgeId]) {\n      clusterEdgeMap[newEdgeId].weight += weight;\n      clusterEdgeMap[newEdgeId].count++;\n    } else {\n      const newEdge = {\n        source: sourceClusterId,\n        target: targetClusterId,\n        weight,\n        count: 1\n      };\n      clusterEdgeMap[newEdgeId] = newEdge;\n      clusterEdges.push(newEdge);\n    }\n  });\n  const clustersArray = [];\n  Object.keys(finalClusters).forEach(clusterId => {\n    clustersArray.push(finalClusters[clusterId]);\n  });\n  return {\n    clusters: clustersArray,\n    clusterEdges\n  }\n}\n\nexport default louvain;\n","import Vector from './utils/vector';\n/**\n * cosine-similarity算法 计算余弦相似度\n * @param item 元素\n * @param targetItem 目标元素\n */\nconst cosineSimilarity = (\n  item: number[],\n  targetItem: number[],\n): number => {\n  // 目标元素向量\n  const targetItemVector = new Vector(targetItem);\n  // 目标元素向量的模长\n  const targetNodeNorm2 = targetItemVector.norm2();\n  // 元素向量\n  const itemVector = new Vector(item);\n  // 元素向量的模长\n  const itemNorm2 = itemVector.norm2();\n  // 计算元素向量和目标元素向量的点积\n  const dot = targetItemVector.dot(itemVector);\n  const norm2Product = targetNodeNorm2 * itemNorm2;\n  // 计算元素向量和目标元素向量的余弦相似度\n  const cosineSimilarity = norm2Product ? dot / norm2Product : 0;\n  return cosineSimilarity;\n}\n\nexport default cosineSimilarity;\n","/**\n * 并查集 Disjoint set to support quick union\n */\nexport default class UnionFind {\n  count: number;\n\n  parent: {};\n\n  constructor(items: (number | string)[]) {\n    this.count = items.length;\n    this.parent = {};\n    for (const i of items) {\n      this.parent[i] = i;\n    }\n  }\n\n  // find the root of the item\n  find(item) {\n    while (this.parent[item] !== item) {\n      item = this.parent[item];\n    }\n    return item;\n  }\n\n  union(a, b) {\n    const rootA = this.find(a);\n    const rootB = this.find(b);\n\n    if (rootA === rootB) return;\n\n    // make the element with smaller root the parent\n    if (rootA < rootB) {\n      if (this.parent[b] !== b) this.union(this.parent[b], a);\n      this.parent[b] = this.parent[a];\n    } else {\n      if (this.parent[a] !== a) this.union(this.parent[a], b);\n      this.parent[a] = this.parent[b];\n    }\n  }\n\n  // whether a and b are connected, i.e. a and b have the same root\n  connected(a, b) {\n    return this.find(a) === this.find(b);\n  }\n}\n","const defaultCompare = (a, b) => {\n  return a - b;\n};\n\nexport default class MinBinaryHeap {\n  list: any[];\n\n  compareFn: (a: any, b: any) => number;\n\n  constructor(compareFn = defaultCompare) {\n    this.compareFn = compareFn;\n    this.list = [];\n  }\n\n  getLeft(index) {\n    return 2 * index + 1;\n  }\n\n  getRight(index) {\n    return 2 * index + 2;\n  }\n\n  getParent(index) {\n    if (index === 0) {\n      return null;\n    }\n    return Math.floor((index - 1) / 2);\n  }\n\n  isEmpty() {\n    return this.list.length <= 0;\n  }\n\n  top() {\n    return this.isEmpty() ? undefined : this.list[0];\n  }\n\n  delMin() {\n    const top = this.top();\n    const bottom = this.list.pop();\n    if (this.list.length > 0) {\n      this.list[0] = bottom;\n      this.moveDown(0);\n    }\n    return top;\n  }\n\n  insert(value) {\n    if (value !== null) {\n      this.list.push(value);\n      const index = this.list.length - 1;\n      this.moveUp(index);\n      return true;\n    }\n    return false;\n  }\n\n  moveUp(index) {\n    let parent = this.getParent(index);\n    while (index && index > 0 && this.compareFn(this.list[parent], this.list[index]) > 0) {\n      // swap\n      const tmp = this.list[parent];\n      this.list[parent] = this.list[index];\n      this.list[index] = tmp;\n      // [this.list[index], this.list[parent]] = [this.list[parent], this.list[index]]\n      index = parent;\n      parent = this.getParent(index);\n    }\n  }\n\n  moveDown(index) {\n    let element = index;\n    const left = this.getLeft(index);\n    const right = this.getRight(index);\n    const size = this.list.length;\n    if (left !== null && left < size && this.compareFn(this.list[element], this.list[left]) > 0) {\n      element = left;\n    } else if (\n      right !== null &&\n      right < size &&\n      this.compareFn(this.list[element], this.list[right]) > 0\n    ) {\n      element = right;\n    }\n    if (index !== element) {\n      [this.list[index], this.list[element]] = [this.list[element], this.list[index]];\n      this.moveDown(element);\n    }\n  }\n}\n","import UnionFind from './structs/union-find';\nimport MinBinaryHeap from './structs/binary-heap';\nimport { GraphData, EdgeConfig } from './types';\nimport { getEdgesByNodeId } from './util';\n\n/**\n * Prim algorithm，use priority queue，复杂度 O(E+V*logV), V: 节点数量，E: 边的数量\n * refer: https://en.wikipedia.org/wiki/Prim%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n */\nconst primMST = (graphData: GraphData, weight?: string) => {\n  const selectedEdges = [];\n  const { nodes = [], edges = [] } = graphData;\n  if (nodes.length === 0) {\n    return selectedEdges;\n  }\n\n  // 从nodes[0]开始\n  const currNode = nodes[0];\n  const visited = new Set();\n  visited.add(currNode);\n\n  // 用二叉堆维护距已加入节点的其他节点的边的权值\n  const compareWeight = (a: EdgeConfig, b: EdgeConfig) => {\n    if (weight) {\n      return a.weight - b.weight;\n    }\n    return 0;\n\n  };\n  const edgeQueue = new MinBinaryHeap(compareWeight);\n  getEdgesByNodeId(currNode.id, edges).forEach((edge) => {\n    edgeQueue.insert(edge);\n  });\n\n  while (!edgeQueue.isEmpty()) {\n    // 选取与已加入的结点之间边权最小的结点\n    const currEdge: EdgeConfig = edgeQueue.delMin();\n    const source = currEdge.source;\n    const target = currEdge.target;\n    if (visited.has(source) && visited.has(target)) continue;\n    selectedEdges.push(currEdge);\n\n    if (!visited.has(source)) {\n      visited.add(source);\n      getEdgesByNodeId(source, edges).forEach((edge) => {\n        edgeQueue.insert(edge);\n      });\n    }\n    if (!visited.has(target)) {\n      visited.add(target);\n      getEdgesByNodeId(target, edges).forEach((edge) => {\n        edgeQueue.insert(edge);\n      });\n    }\n  }\n  return selectedEdges;\n};\n\n/**\n * Kruskal algorithm，复杂度 O(E*logE), E: 边的数量\n * refer: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n * @return IEdge[] 返回构成MST的边的数组\n */\nconst kruskalMST = (graphData: GraphData, weight?: string): EdgeConfig[] => {\n  const selectedEdges = [];\n  const { nodes = [], edges = [] } = graphData\n  if (nodes.length === 0) {\n    return selectedEdges;\n  }\n\n  // 若指定weight，则将所有的边按权值从小到大排序\n  const weightEdges = edges.map((edge) => edge);\n  if (weight) {\n    weightEdges.sort((a, b) => {\n      return a.weight - b.weight;\n    });\n  }\n  const disjointSet = new UnionFind(nodes.map((n) => n.id));\n\n  // 从权值最小的边开始，如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边\n  // 直到遍历完所有点或边\n  while (weightEdges.length > 0) {\n    const curEdge = weightEdges.shift();\n    const source = curEdge.source;\n    const target = curEdge.target;\n    if (!disjointSet.connected(source, target)) {\n      selectedEdges.push(curEdge);\n      disjointSet.union(source, target);\n    }\n  }\n  return selectedEdges;\n};\n\n/**\n * 最小生成树\n * refer: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\n * @param graph\n * @param weight 指定用于作为边权重的属性，若不指定，则认为所有边权重一致\n * @param algo 'prim' | 'kruskal' 算法类型\n * @return EdgeConfig[] 返回构成MST的边的数组\n */\nconst minimumSpanningTree = (graphData: GraphData, weight?: string, algo?: string): EdgeConfig[] => {\n  const algos = {\n    prim: primMST,\n    kruskal: kruskalMST,\n  };\n  if (!algo) return kruskalMST(graphData, weight);\n\n  return algos[algo](graphData, weight);\n}\n\nexport default minimumSpanningTree\n","import { indexOf } from \"@antv/util\";\n\nexport const VACANT_EDGE_ID = -1;\nexport const VACANT_NODE_ID = -1;\nexport const VACANT_EDGE_LABEL = \"-1\";\nexport const VACANT_NODE_LABEL = \"-1\";\nexport const VACANT_GRAPH_ID = -1;\nexport const AUTO_EDGE_ID = \"-1\";\n\nexport class Edge {\n  public id: number;\n  public from: number;\n  public to: number;\n  public label: string;\n\n  constructor(\n    id = VACANT_EDGE_ID,\n    from = VACANT_NODE_ID,\n    to = VACANT_NODE_ID,\n    label = VACANT_EDGE_LABEL\n  ) {\n    this.id = id;\n    this.from = from;\n    this.to = to;\n    this.label = label;\n  }\n}\n\nexport class Node {\n  public id: number;\n  public from: number;\n  public to: number;\n  public label: string;\n  public edges: Edge[];\n  public edgeMap: {};\n\n  constructor(id = VACANT_NODE_ID, label = VACANT_NODE_LABEL) {\n    this.id = id;\n    this.label = label;\n    this.edges = [];\n    this.edgeMap = {};\n  }\n\n  addEdge(edge) {\n    this.edges.push(edge);\n    this.edgeMap[edge.id] = edge;\n  }\n}\n\nexport class Graph {\n  public id: number;\n  public from: number;\n  public to: number;\n  public label: string;\n  public edgeIdAutoIncrease: boolean;\n  public nodes: Node[];\n  public edges: Edge[];\n  public nodeMap: {};\n  public edgeMap: {};\n  public nodeLabelMap: {}; // key 是 label，value 是节点 id 的数组\n  public edgeLabelMap: {};\n  private counter: number; // 自增用于自动生成边 id\n  public directed: boolean;\n\n  constructor(\n    id = VACANT_NODE_ID,\n    edgeIdAutoIncrease = true,\n    directed = false\n  ) {\n    this.id = id;\n    this.edgeIdAutoIncrease = edgeIdAutoIncrease;\n    this.edges = [];\n    this.nodes = [];\n    this.nodeMap = {};\n    this.edgeMap = {};\n    this.nodeLabelMap = {};\n    this.edgeLabelMap = {};\n    this.counter = 0;\n    this.directed = directed;\n  }\n\n  getNodeNum() {\n    return this.nodes.length;\n  }\n\n  addNode(id: number, label: string) {\n    if (this.nodeMap[id]) return;\n    const node = new Node(id, label);\n    this.nodes.push(node);\n    this.nodeMap[id] = node;\n    if (!this.nodeLabelMap[label]) this.nodeLabelMap[label] = [];\n    this.nodeLabelMap[label].push(id);\n  }\n\n  addEdge(id: number, from: number, to: number, label: string) {\n    if (this.edgeIdAutoIncrease || id === undefined) id = this.counter++;\n    if (this.nodeMap[from] && this.nodeMap[to] && this.nodeMap[to].edgeMap[id])\n      return;\n    const edge = new Edge(id, from, to, label);\n    this.edges.push(edge);\n    this.edgeMap[id] = edge;\n\n    this.nodeMap[from].addEdge(edge);\n\n    if (!this.edgeLabelMap[label]) this.edgeLabelMap[label] = [];\n    this.edgeLabelMap[label].push(edge);\n\n    if (!this.directed) {\n      const rEdge = new Edge(id, to, from, label);\n      this.nodeMap[to].addEdge(rEdge);\n      this.edgeLabelMap[label].push(rEdge);\n    }\n  }\n}\n","import { GraphData } from \"../types\";\nimport { clone } from \"@antv/util\";\nimport {\n  Graph,\n  Edge,\n  VACANT_NODE_LABEL,\n  VACANT_GRAPH_ID,\n  Node,\n  VACANT_EDGE_LABEL,\n} from \"./struct\";\n\nexport interface EdgeMap {\n  [key: string]: {\n    // key 的格式为 source-target\n    idx: number; // 该边在原图 graphData.edges 的序号\n    edge: any;\n  };\n}\n\nexport interface NodeMap {\n  [key: string]: {\n    // key 格式为 node.id\n    idx: number; // 该j客店在原图 graphData.nodes 的序号\n    node: any;\n    degree: number;\n    inDegree: number;\n    outDegree: number;\n  };\n}\n\ninterface PDFS {\n  graphId: number;\n  edge: any;\n  preNode: any;\n}\n\nclass DFSedge {\n  public fromNode: number;\n  public toNode: number;\n  public nodeEdgeNodeLabel: {\n    nodeLabel1: string;\n    edgeLabel: string;\n    nodeLabel2: string;\n  };\n\n  constructor(\n    fromNode: number,\n    toNode: number,\n    fromNodeLabel: string,\n    edgeLabel: string,\n    toNodeLabel: string\n  ) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || VACANT_NODE_LABEL,\n    };\n  }\n\n  equalTo(other) {\n    return (\n      this.fromNode === other.formNode &&\n      this.toNode === other.toNode &&\n      this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel\n    );\n  }\n\n  notEqualTo(other) {\n    return !this.equalTo(other);\n  }\n}\n\n// DFScode 是 DESedge 的数组\nclass DFScode {\n  public dfsEdgeList: DFSedge[];\n  public rmpath: any;\n\n  constructor() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n\n  equalTo(other) {\n    const aLength = this.dfsEdgeList.length;\n    const bLength = other.length;\n    if (aLength !== bLength) return false;\n    for (let i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n    return true;\n  }\n\n  notEqualTo(other) {\n    return !this.equalTo(other);\n  }\n\n  /** 增加一条 edge 到 DFScode */\n  pushBack(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(\n      new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel)\n    );\n    return this.dfsEdgeList;\n  }\n\n  /** 根据 dfs 构建图 */\n  toGraph(graphId: number = VACANT_GRAPH_ID, directed = false) {\n    const graph = new Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach((dfsEdge) => {\n      const fromNodeId = dfsEdge.fromNode;\n      const toNodeId = dfsEdge.toNode;\n      const { nodeLabel1, edgeLabel, nodeLabel2 } = dfsEdge.nodeEdgeNodeLabel;\n\n      if (nodeLabel1 !== VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1)  graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  }\n\n  // 建立 rightmost path\n  buildRmpath() {\n    this.rmpath = [];\n    let oldFrom = undefined;\n    const selfLength = this.dfsEdgeList.length;\n    for (let i = selfLength - 1; i >= 0; i--) {\n      const dfsEdge = this.dfsEdgeList[i];\n      const fromNodeIdx = dfsEdge.fromNode;\n      const toNodeIdx = dfsEdge.toNode;\n      if (\n        fromNodeIdx < toNodeIdx &&\n        (oldFrom === undefined || toNodeIdx === oldFrom)\n      ) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n    return this.rmpath;\n  }\n\n  getNodeNum() {\n    const nodeMap = {};\n    this.dfsEdgeList.forEach((dfsEdge) => {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  }\n}\n\nclass History {\n  public his: object;\n  public edges: Edge[];\n  public nodesUsed: object;\n  public edgesUsed: object;\n\n  constructor(pdfs: PDFS) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n    while (pdfs) {\n      const e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    }\n    // 倒序\n    this.edges = this.edges.reverse();\n  }\n\n  hasNode(node: Node) {\n    return this.nodesUsed[node.id] === 1;\n  }\n\n  hasEdge(edge: Edge) {\n    return this.edgesUsed[edge.id] === 1;\n  }\n}\n\ninterface Root {\n  [key: string]: {\n    projected: PDFS[];\n    nodeLabel1?: string;\n    edgeLabel?: string;\n    nodeLabel2?: string;\n    fromNodeId?: number;\n    toNodeId?: number;\n  };\n}\n\ninterface GraphDataMap {\n  [key: string]: GraphData;\n}\ninterface GraphMap {\n  [key: number]: Graph;\n}\n\ninterface AlgorithmProps {\n  graphs: GraphMap; // 图数据\n  minSupport: number; // 算法参数，最小支持数量，根据 graphs 内图的数量指定\n  directed?: boolean; // 是否有向图，默认为 false\n  minNodeNum?: number; // 每个子图中边的最少个数，默认为 1\n  maxNodeNum?: number; // 每个子图中边的最多个数，默认为 4\n  top?: number; // 返回前 top 个频繁子图，默认为 10\n  verbose?: boolean;\n}\n\nclass GSpan {\n  public graphs: GraphMap;\n  public dfsCode: DFScode;\n  public support: number;\n  public frequentSize1Subgraphs: GraphData[];\n  public frequentSubgraphs: Graph[];\n  public reportDF: [];\n  public maxNodeNum: number;\n  public minNodeNum: number;\n  public minSupport: number;\n  public top: number;\n  public directed: boolean;\n  private counter: number; // 用于生成图的 id，自增\n  public verbose: boolean;\n\n  constructor({\n    graphs,\n    minSupport = 2,\n    minNodeNum = 1,\n    maxNodeNum = 4,\n    top = 10,\n    directed = false,\n    verbose = false,\n  }: AlgorithmProps) {\n    // -------- 第零步，初始化-------\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0;\n    // TODO? timestamp = {}\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  }\n\n  // Line 352\n  findForwardRootEdges(graph: Graph, fromNode: Node): Edge[] {\n    const result = [];\n    const nodeMap = graph.nodeMap;\n    fromNode.edges.forEach((edge) => {\n      if (this.directed || fromNode.label <= nodeMap[edge.to].label)\n        result.push(edge);\n    });\n\n    return result;\n  }\n\n  findBackwardEdge(\n    graph: Graph,\n    edge1: Edge,\n    edge2: Edge,\n    history: History\n  ): Edge {\n    if (!this.directed && edge1 === edge2) return null;\n    const nodeMap = graph.nodeMap;\n    const edge2To = nodeMap[edge2.to];\n    const edge2ToEdges = edge2To.edges;\n    const edgeLength = edge2ToEdges.length;\n    for (let i = 0; i < edgeLength; i++) {\n      const edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n      if (!this.directed) {\n        if (\n          edge1.label < edge.label ||\n          (edge1.label === edge.label &&\n            nodeMap[edge1.to].label <= nodeMap[edge2.to].label)\n        ) {\n          return edge;\n        }\n      } else {\n        if (\n          nodeMap[edge1.from].label < nodeMap[edge2.to].label ||\n          (nodeMap[edge1.from].label === nodeMap[edge2.to].label &&\n            edge1.label <= edge.label)\n        ) {\n          return edge;\n        }\n      }\n    }\n    return null;\n  }\n\n  findForwardPureEdges(\n    graph,\n    rightmostEdge,\n    minNodeLabel,\n    history: History\n  ): Edge[] {\n    const result = [];\n    const rightmostEdgeToId = rightmostEdge.to;\n    const edges = graph.nodeMap[rightmostEdgeToId].edges;\n    const edgeLength = edges.length;\n    for (let i = 0; i < edgeLength; i++) {\n      const edge = edges[i];\n      const toNode = graph.nodeMap[edge.to];\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n    return result;\n  }\n\n  findForwardRmpathEdges(\n    graph: Graph,\n    rightmostEdge: Edge,\n    minNodeLabel: string,\n    history: History\n  ): Edge[] {\n    const result = [];\n    const nodeMap = graph.nodeMap;\n    const toNodeLabel = nodeMap[rightmostEdge.to].label;\n    const fromNode = nodeMap[rightmostEdge.from];\n    const edges = fromNode.edges;\n    const edgeLength = edges.length;\n    for (let i = 0; i < edgeLength; i++) {\n      const edge = edges[i];\n      const newToNodeLabel = nodeMap[edge.to].label;\n      if (\n        rightmostEdge.to === edge.to ||\n        minNodeLabel > newToNodeLabel ||\n        history.hasNode(nodeMap[edge.to])\n      ) {\n        continue;\n      }\n      if (\n        rightmostEdge.label < edge.label ||\n        (rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel)\n      ) {\n        result.push(edge);\n      }\n    }\n    return result;\n  }\n\n  getSupport(projected: PDFS[]): number {\n    const graphMap = {};\n    projected.forEach((pro) => {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  }\n\n  findMinLabel(\n    obj: Root\n  ): {\n    nodeLabel1?: string;\n    edgeLabel: string;\n    nodeLabel2?: string;\n  } {\n    let minLabel = undefined;\n    Object.keys(obj).forEach((nodeEdgeNodeLabel) => {\n      const { nodeLabel1, edgeLabel, nodeLabel2 } = obj[nodeEdgeNodeLabel];\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1,\n          edgeLabel,\n          nodeLabel2,\n        };\n        return;\n      }\n      if (\n        nodeLabel1 < minLabel.nodeLabel1 ||\n        (nodeLabel1 === minLabel.nodeLabel1 &&\n          edgeLabel < minLabel.edgeLabel) ||\n        (nodeLabel1 === minLabel.nodeLabel1 &&\n          edgeLabel === minLabel.edgeLabel &&\n          nodeLabel2 < minLabel.nodeLabel2)\n      ) {\n        minLabel = {\n          nodeLabel1,\n          edgeLabel,\n          nodeLabel2,\n        };\n      }\n    });\n    return minLabel;\n  }\n\n  isMin() {\n    const dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    const directed = this.directed;\n    const graph = dfsCode.toGraph(VACANT_GRAPH_ID, directed);\n    const nodeMap = graph.nodeMap;\n    const dfsCodeMin = new DFScode();\n    const root: Root = {};\n    graph.nodes.forEach((node) => {\n      const forwardEdges = this.findForwardRootEdges(graph, node);\n      forwardEdges.forEach((edge) => {\n        let otherNode = nodeMap[edge.to];\n        const nodeEdgeNodeLabel = `${node.label}-${edge.label}-${otherNode.label}`;\n        if (!root[nodeEdgeNodeLabel])\n          root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: otherNode.label,\n          };\n        const pdfs: PDFS = {\n          graphId: graph.id,\n          edge,\n          preNode: null,\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    });\n\n    // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n    let minLabel = this.findMinLabel(root); // line 419\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(\n      new DFSedge(\n        0,\n        1,\n        minLabel.nodeLabel1,\n        minLabel.edgeLabel,\n        minLabel.nodeLabel2\n      )\n    );\n\n    // line 423\n    const projectIsMin = (projected: PDFS[]) => {\n      // right most path\n      const rmpath = dfsCodeMin.buildRmpath();\n      const minNodeLabel =\n        dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      const maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n\n      const backwardRoot: Root = {};\n      let flag = false,\n        newTo = 0;\n      let end = directed ? -1 : 0; // 遍历到 1 还是到 0\n      for (let i = rmpath.length - 1; i > end; i--) {\n        if (flag) break;\n        // line 435\n        projected.forEach((p) => {\n          const history = new History(p);\n          const backwardEdge = this.findBackwardEdge(\n            graph,\n            history.edges[rmpath[i]],\n            history.edges[rmpath[0]],\n            history\n          );\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label,\n              };\n            }\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p,\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      }\n\n      if (flag) {\n        const minBackwardEdgeLabel = this.findMinLabel(backwardRoot);\n        dfsCodeMin.dfsEdgeList.push(\n          new DFSedge(\n            maxToC,\n            newTo,\n            VACANT_NODE_LABEL,\n            minBackwardEdgeLabel.edgeLabel,\n            VACANT_NODE_LABEL\n          )\n        );\n        const idx = dfsCodeMin.dfsEdgeList.length - 1;\n        if (this.dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx])\n          return false;\n        return projectIsMin(\n          backwardRoot[minBackwardEdgeLabel.edgeLabel].projected\n        );\n      }\n      const forwardRoot: Root = {};\n      flag = false;\n      let newFrom = 0;\n      projected.forEach((p) => {\n        const history = new History(p);\n        const forwardPureEdges = this.findForwardPureEdges(\n          graph,\n          history.edges[rmpath[0]],\n          minNodeLabel,\n          history\n        );\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach((edge) => {\n            const key = `${edge.label}-${nodeMap[edge.to].label}`;\n            if (!forwardRoot[key])\n              forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label,\n              };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge,\n              preNode: p,\n            });\n          });\n        }\n      });\n\n      const pathLength = rmpath.length;\n      for (let i = 0; i < pathLength; i++) {\n        if (flag) break;\n        const value = rmpath[i];\n        projected.forEach((p) => {\n          const history = new History(p);\n          const forwardRmpathEdges = this.findForwardRmpathEdges(\n            graph,\n            history.edges[value],\n            minNodeLabel,\n            history\n          );\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach((edge) => {\n              const key = `${edge.label}-${nodeMap[edge.to].label}`;\n              if (!forwardRoot[key])\n                forwardRoot[key] = {\n                  projected: [],\n                  edgeLabel: edge.label,\n                  nodeLabel2: nodeMap[edge.to].label,\n                };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge,\n                preNode: p,\n              });\n            });\n          }\n        });\n      }\n\n      if (!flag) return true;\n\n      const forwardMinEdgeNodeLabel = this.findMinLabel(forwardRoot);\n      dfsCodeMin.dfsEdgeList.push(\n        new DFSedge(\n          newFrom,\n          maxToC + 1,\n          VACANT_NODE_LABEL,\n          forwardMinEdgeNodeLabel.edgeLabel,\n          forwardMinEdgeNodeLabel.nodeLabel2\n        )\n      );\n      const idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx])\n        return false;\n      return projectIsMin(\n        forwardRoot[\n          `${forwardMinEdgeNodeLabel.edgeLabel}-${forwardMinEdgeNodeLabel.nodeLabel2}`\n        ].projected\n      );\n    };\n    const key = `${minLabel.nodeLabel1}-${minLabel.edgeLabel}-${minLabel.nodeLabel2}`;\n    return projectIsMin(root[key].projected);\n  }\n\n  report() {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    const graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push(clone(graph));\n  }\n\n  subGraphMining(projected) {\n    const support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n\n    const nodeNum = this.dfsCode.getNodeNum();\n    const rmpath = this.dfsCode.buildRmpath();\n    const maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    const minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel\n      .nodeLabel1;\n\n    const forwardRoot: Root = {};\n    const backwardRoot: Root = {};\n\n    projected.forEach((p) => {\n      const graph = this.graphs[p.graphId];\n      const nodeMap = graph.nodeMap;\n      const history = new History(p);\n      // backward Line 526\n      for (let i = rmpath.length - 1; i >= 0; i--) {\n        const backwardEdge = this.findBackwardEdge(\n          graph,\n          history.edges[rmpath[i]],\n          history.edges[rmpath[0]],\n          history\n        );\n        if (backwardEdge) {\n          const key = `${this.dfsCode.dfsEdgeList[rmpath[i]].fromNode}-${\n            backwardEdge.label\n          }`;\n          if (!backwardRoot[key])\n            backwardRoot[key] = {\n              projected: [],\n              toNodeId: this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n              edgeLabel: backwardEdge.label,\n            };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p,\n          });\n        }\n      }\n\n      // pure forward\n      if (nodeNum >= this.maxNodeNum) return;\n      const forwardPureEdges = this.findForwardPureEdges(\n        graph,\n        history.edges[rmpath[0]],\n        minNodeLabel,\n        history\n      );\n      forwardPureEdges.forEach((edge) => {\n        const key = `${maxToC}-${edge.label}-${nodeMap[edge.to].label}`;\n        if (!forwardRoot[key])\n          forwardRoot[key] = {\n            projected: [],\n            fromNodeId: maxToC,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label,\n          };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge,\n          preNode: p,\n        });\n      });\n\n      // rmpath forward\n      for (let i = 0; i < rmpath.length; i++) {\n        const forwardRmpathEdges = this.findForwardRmpathEdges(\n          graph,\n          history.edges[rmpath[i]],\n          minNodeLabel,\n          history\n        );\n        forwardRmpathEdges.forEach((edge) => {\n          const key = `${this.dfsCode.dfsEdgeList[rmpath[i]].fromNode}-${\n            edge.label\n          }-${nodeMap[edge.to].label}`;\n          if (!forwardRoot[key])\n            forwardRoot[key] = {\n              projected: [],\n              fromNodeId: this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label,\n            };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge,\n            preNode: p,\n          });\n        });\n      }\n    });\n\n    // backward\n    Object.keys(backwardRoot).forEach((key) => {\n      const { toNodeId, edgeLabel } = backwardRoot[key];\n      this.dfsCode.dfsEdgeList.push(\n        new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\")\n      );\n      this.subGraphMining(backwardRoot[key].projected);\n      this.dfsCode.dfsEdgeList.pop();\n    });\n\n    // forward\n    Object.keys(forwardRoot).forEach((key) => {\n      const { fromNodeId, edgeLabel, nodeLabel2 } = forwardRoot[key];\n      this.dfsCode.dfsEdgeList.push(\n        new DFSedge(\n          fromNodeId,\n          maxToC + 1,\n          VACANT_NODE_LABEL,\n          edgeLabel,\n          nodeLabel2\n        )\n      );\n      this.subGraphMining(forwardRoot[key].projected);\n      this.dfsCode.dfsEdgeList.pop();\n    });\n  }\n\n  generate1EdgeFrequentSubGraphs() {\n    const graphs = this.graphs;\n    const directed = this.directed;\n    const minSupport = this.minSupport;\n    const frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    let nodeLabelCounter = {},\n      nodeEdgeNodeCounter = {};\n    // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n    const nodeLableCounted = {};\n    // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n    const nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach((key) => {\n      // Line 271\n      const graph = graphs[key];\n      const nodeMap = graph.nodeMap;\n      // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n      graph.nodes.forEach((node, i) => {\n        // Line 272\n        const nodeLabel = node.label;\n        const graphNodeKey = `${key}-${nodeLabel}`;\n        if (!nodeLableCounted[graphNodeKey]) {\n          let counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel,\n        };\n        // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n        node.edges.forEach((edge) => {\n          let nodeLabel1 = nodeLabel;\n          let nodeLabel2 = nodeMap[edge.to].label;\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            const tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n          const edgeLabel = edge.label;\n\n          const graphNodeEdgeNodeKey = `${key}-${nodeLabel1}-${edgeLabel}-${nodeLabel2}`;\n          const nodeEdgeNodeKey = `${nodeLabel1}-${edgeLabel}-${nodeLabel2}`;\n\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            let counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1,\n            edgeLabel,\n            nodeLabel2,\n          };\n        });\n      });\n    });\n\n    // 计算频繁的节点\n    Object.keys(nodeLabelCounter).forEach((label) => {\n      const count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      const g = { nodes: [], edges: [] };\n      g.nodes.push({\n        id: \"0\",\n        label,\n      });\n      frequentSize1Subgraphs.push(g);\n      // if (minNodeNum <= 1) reportSize1 TODO\n    });\n\n    return frequentSize1Subgraphs;\n  }\n\n  run() {\n    // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n\n    if (this.maxNodeNum < 2) return;\n\n    const graphs = this.graphs;\n    const directed = this.directed;\n\n    // PDFS 数组的 map Line 304\n    const root: Root = {};\n    Object.keys(graphs).forEach((graphId: any) => {\n      const graph = graphs[graphId];\n      const nodeMap = graph.nodeMap;\n      // Line 306\n      graph.nodes.forEach((node) => {\n        const forwardRootEdges = this.findForwardRootEdges(graph, node);\n        // Line 308\n        forwardRootEdges.forEach((edge) => {\n          let toNode = nodeMap[edge.to];\n          const nodeEdgeNodeLabel = `${node.label}-${edge.label}-${toNode.label}`;\n          if (!root[nodeEdgeNodeLabel])\n            root[nodeEdgeNodeLabel] = {\n              projected: [],\n              nodeLabel1: node.label as string,\n              edgeLabel: edge.label as string,\n              nodeLabel2: toNode.label as string,\n            };\n          const pdfs: PDFS = {\n            graphId,\n            edge,\n            preNode: null,\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    });\n\n    // Line 313\n    Object.keys(root).forEach((nodeEdgeNodeLabel) => {\n      const { projected, nodeLabel1, edgeLabel, nodeLabel2 } = root[\n        nodeEdgeNodeLabel\n      ];\n\n      this.dfsCode.dfsEdgeList.push(\n        new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2)\n      );\n      this.subGraphMining(projected);\n      this.dfsCode.dfsEdgeList.pop();\n    });\n  }\n}\n\nconst formatGraphs = (\n  graphs: GraphDataMap,\n  directed: boolean,\n  nodeLabelProp: string,\n  edgeLabelProp: string\n): GraphMap => {\n  const result: { [key: number]: Graph } = {};\n  Object.keys(graphs).forEach((key, i) => {\n    const graph = graphs[key];\n    const fGraph = new Graph(i, true, directed);\n    const nodeIdxMap = {};\n    graph.nodes.forEach((node, j) => {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach((edge, k) => {\n      const sourceIdx = nodeIdxMap[edge.source];\n      const targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\n\nconst toGraphDatas = (\n  graphs: Graph[],\n  nodeLabelProp: string,\n  edgeLabelProp: string\n) => {\n  const result = [];\n  graphs.forEach((graph) => {\n    const graphData = { nodes: [], edges: [] };\n    graph.nodes.forEach((node) => {\n      graphData.nodes.push({\n        id: `${node.id}`,\n        [nodeLabelProp]: node.label,\n      });\n    });\n    graph.edges.forEach((edge) => {\n      graphData.edges.push({\n        source: `${edge.from}`,\n        target: `${edge.to}`,\n        [edgeLabelProp]: edge.label,\n      });\n    });\n    result.push(graphData);\n  });\n  return result;\n};\n\ninterface Props {\n  graphs: GraphDataMap; // 图数据\n  minSupport: number; // 算法参数，最小支持数量，根据 graphs 内图的数量指定\n  directed?: boolean; // 是否有向图，默认为 false\n  nodeLabelProp?: string; // 节点类型的属性名\n  edgeLabelProp?: string; // 边类型的属性名\n  minNodeNum?: number; // 每个子图中节点的最少个数，默认为 1\n  maxNodeNum?: number; // 每个子图中节点的最多个数，默认为 4\n  top?: number; // 返回前 top 个频繁子图，默认为 10\n  verbose?: boolean;\n}\n\nconst DEFAULT_LABEL_NAME = \"cluster\";\n\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\nconst gSpan = (params: Props): GraphData[] => {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  const {\n    graphs,\n    directed = false,\n    nodeLabelProp = DEFAULT_LABEL_NAME,\n    edgeLabelProp = DEFAULT_LABEL_NAME,\n  } = params;\n  const formattedGraphs = formatGraphs(\n    graphs,\n    directed,\n    nodeLabelProp,\n    edgeLabelProp\n  );\n  const { minSupport, maxNodeNum, minNodeNum, verbose, top } = params;\n\n  // ------- 初始化与执行算法 -------\n  const algoParams = {\n    graphs: formattedGraphs,\n    minSupport,\n    maxNodeNum,\n    minNodeNum,\n    top,\n    verbose,\n    directed,\n  };\n  const calculator = new GSpan(algoParams);\n  calculator.run();\n\n  const result = toGraphDatas(\n    calculator.frequentSubgraphs,\n    nodeLabelProp,\n    edgeLabelProp\n  );\n  return result;\n};\n\nexport default gSpan;\n","import floydWarshall from './floydWarshall';\nimport { GraphData, Matrix } from './types';\nimport gSpan, { EdgeMap, NodeMap } from './gSpan/gSpan';\nimport dijkstra from './dijkstra';\nimport { uniqueId } from './util';\n\n/** 节点对 map */\ninterface NodePairMap {\n  [key: string]: {\n    // key 的格式为 startNodeIdx-endNodeIdx\n    start: number; // 第一个节点的 idx\n    end: number; // 第二个节点的 idx\n    distance: number; // 两节点最短路径长度\n  };\n}\n\ninterface LabelMap {\n  [label: string]: any;\n}\n\n/** 邻居单元类型 */\ninterface NeighborUnit {\n  nodeId: string;\n  nodeIdx: number;\n  nodeIdxs: number[]; // the first one is nodeIdx\n  neighbors: any[]; //\n  neighborNum: number;\n  nodeLabelCountMap: {\n    [label: string]: {\n      count: number;\n      dists: number[]; // 按照从小到大排序的距离数组\n    };\n  };\n}\n\n/** 节点对的邻居交集的诱导子图 map */\ninterface InterGraphMap {\n  [key: string]: GraphData; // key 格式由节点对的 idx 组成：beginIdx-endIdx，和 nodePairMap 对应\n}\n\n/**\n * 为 graphData 中每个节点生成邻居单元数组\n * @param graphData\n * @param spm\n * @param nodeLabelProp\n * @param k k-近邻\n */\nconst findKNeighborUnits = (\n  graphData: GraphData,\n  spm: Matrix[],\n  nodeLabelProp: string = 'cluster',\n  k: number = 2,\n): NeighborUnit[] => {\n  const units: NeighborUnit[] = [];\n  const nodes = graphData.nodes;\n  spm.forEach((row: number[], i) => {\n    units.push(findKNeighborUnit(nodes, row, i, nodeLabelProp, k));\n  });\n  return units;\n};\n\nconst findKNeighborUnit = (nodes, row, i, nodeLabelProp, k) => {\n  const unitNodeIdxs = [i];\n  const neighbors = [];\n  const labelCountMap = {};\n  row.forEach((v, j) => {\n    if (v <= k && i !== j) {\n      unitNodeIdxs.push(j);\n      neighbors.push(nodes[j]);\n      const label = nodes[j][nodeLabelProp];\n      if (!labelCountMap[label]) labelCountMap[label] = { count: 1, dists: [v] };\n      else {\n        labelCountMap[label].count++;\n        labelCountMap[label].dists.push(v);\n      }\n    }\n  });\n  // 将 labelCountMap 中的 dists 按照从小到大排序，方便后面使用\n  Object.keys(labelCountMap).forEach(label => {\n    labelCountMap[label].dists = labelCountMap[label].dists.sort((a, b) => a - b);\n  });\n  return {\n    nodeIdx: i,\n    nodeId: nodes[i].id,\n    nodeIdxs: unitNodeIdxs,\n    neighbors,\n    neighborNum: unitNodeIdxs.length - 1,\n    nodeLabelCountMap: labelCountMap,\n  };\n};\n\n/**\n * 随机寻找点对，满足距离小于 k\n * @param k 参数 k，表示 k-近邻\n * @param nodeNum 参数 length\n * @param maxNodePairNum 寻找点对的数量不超过 maxNodePairNum\n * @param spm 最短路径矩阵\n */\nconst findNodePairsRandomly = (\n  k: number,\n  nodeNum: number,\n  maxNodePairNum: number,\n  kNeighborUnits: NeighborUnit[],\n  spm: Matrix[],\n): NodePairMap => {\n  // 每个节点需要随机找出的点对数\n  let nodePairNumEachNode = Math.ceil(maxNodePairNum / nodeNum);\n  const nodePairMap = {};\n  let foundNodePairCount = 0;\n\n  // 遍历节点，为每个节点随机找出 nodePairNumEachNode 个点对，满足距离小于 k。找到的点对数量超过 maxNodePairNum 或所有节点遍历结束时终止\n  kNeighborUnits.forEach((unit, i) => {\n    // 若未达到 nodePairNumEachNode，或循环次数小于最大循环次数(2 * nodeNum)，继续循环\n    let nodePairForICount = 0;\n    let outerLoopCount = 0;\n    const neighbors = unit.nodeIdxs; // the first one is the center node\n    const neighborNum = unit.neighborNum - 1;\n    while (nodePairForICount < nodePairNumEachNode) {\n      // 另一端节点在节点数组中的的 index\n      let oidx = neighbors[1 + Math.floor(Math.random() * neighborNum)];\n      let innerLoopCount = 0;\n      // 若随机得到的另一端 idx 不符合条件，则继续 random。条件是不是同一个节点、这个点对没有被记录过、距离小于 k\n      while (nodePairMap[`${i}-${oidx}`] || nodePairMap[`${oidx}-${i}`]) {\n        oidx = Math.floor(Math.random() * nodeNum);\n        innerLoopCount++;\n        if (innerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n      }\n      if (innerLoopCount < 2 * nodeNum) {\n        // 未达到最大循环次数，说明找到了合适的另一端\n        nodePairMap[`${i}-${oidx}`] = {\n          start: i,\n          end: oidx,\n          distance: spm[i][oidx],\n        };\n        nodePairForICount++;\n        foundNodePairCount++;\n        // 如果当前找到的点对数量达到了上限，返回结果\n        if (foundNodePairCount >= maxNodePairNum) return nodePairMap;\n      }\n      outerLoopCount++;\n      if (outerLoopCount > 2 * nodeNum) break; // 循环次数大于最大循环次数(2 * nodeNum)跳出循环，避免死循环\n    }\n    // 这个节点没有找到足够 nodePairNumEachNode 的点对。更新 nodePairNumEachNode，让后续节点找更多的点对\n    if (nodePairForICount < nodePairNumEachNode) {\n      const gap = nodePairNumEachNode - nodePairForICount;\n      nodePairNumEachNode = (nodePairNumEachNode + gap) / (nodeNum - i - 1);\n    }\n  });\n  return nodePairMap;\n};\n\n/**\n * 计算所有 nodePairMap 中节点对的相交邻居诱导子图\n * @param nodePairMap 节点对 map，key 为 node1.id-node2.id，value 为 { startNodeIdx, endNodeIdx, distance }\n * @param neighborUnits 每个节点的邻居元数组\n * @param graphData 原图数据\n * @param edgeMap 边的 map，方便检索\n * @param cachedInducedGraphMap 缓存的结果，下次进入该函数将继续更新该缓存，若 key 在缓存中存在则不需要重复计算\n */\nconst getIntersectNeighborInducedGraph = (\n  nodePairMap: NodePairMap,\n  neighborUnits: NeighborUnit[],\n  graphData: GraphData,\n  cachedInducedGraphMap?: InterGraphMap,\n): InterGraphMap => {\n  const nodes = graphData.nodes;\n  if (!cachedInducedGraphMap) cachedInducedGraphMap = {};\n  Object.keys(nodePairMap).forEach(key => {\n    if (cachedInducedGraphMap && cachedInducedGraphMap[key]) return;\n    cachedInducedGraphMap[key] = { nodes: [], edges: [] };\n    const pair = nodePairMap[key];\n    const startUnitNodeIds = neighborUnits[pair.start]?.nodeIdxs;\n    const endUnitNodeIds = neighborUnits[pair.end]?.nodeIdxs;\n    if (!startUnitNodeIds || !endUnitNodeIds) return; // 不存在邻元，返回空图\n    const endSet = new Set(endUnitNodeIds);\n    const intersect = startUnitNodeIds.filter(x => endSet.has(x)); // 可能会爆栈（在 1580 + 6 nodes full-connected 时出现）\n    if (!intersect || !intersect.length) return; // 没有交集，返回空图\n    const intersectIdMap = {};\n    const intersectLength = intersect.length;\n    for (let i = 0; i < intersectLength; i++) {\n      const node = nodes[intersect[i]];\n      cachedInducedGraphMap[key].nodes.push(node); // 将交集中的点加入诱导子图\n      intersectIdMap[node.id] = true;\n    }\n    // 遍历所有边数据，如果边的两端都在交集中，将该边加入诱导子图\n    graphData.edges.forEach(edge => {\n      if (intersectIdMap[edge.source] && intersectIdMap[edge.target])\n        cachedInducedGraphMap[key].edges.push(edge);\n    });\n  });\n  return cachedInducedGraphMap;\n};\n\n/**\n * 计算 strcutre 在 graph 上的匹配数量\n * @param graph 图数据\n * @param structure 目前支持只有两个节点一条边的最简单结构\n * @param nodeLabelProp 节点类型字段名\n * @param edgeLabelProp 边类型字段名\n */\nconst getMatchedCount = (graph, structure, nodeLabelProp, edgeLabelProp) => {\n  const nodeMap = {};\n  graph.nodes.forEach(node => {\n    nodeMap[node.id] = node;\n  });\n  let count = 0;\n  if (!structure?.edges?.length || structure?.nodes?.length < 2) return 0;\n  graph.edges.forEach(e => {\n    const sourceLabel = nodeMap[e.source][nodeLabelProp];\n    const targetLabel = nodeMap[e.target][nodeLabelProp];\n    const strNodeLabel1 = structure?.nodes[0][nodeLabelProp];\n    const strNodeLabel2 = structure?.nodes[1][nodeLabelProp];\n    const strEdgeLabel = structure?.edges[0][edgeLabelProp];\n\n    if (e[edgeLabelProp] !== strEdgeLabel) return;\n    if (\n      (sourceLabel === strNodeLabel1 && targetLabel === strNodeLabel2) ||\n      (sourceLabel === strNodeLabel2 && targetLabel === strNodeLabel1)\n    ) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/**\n * structures 中寻找最具有代表性的一个。这个结构是使得 matchedCountMap 的分组方式类内间距最小，类间间距最大\n * @param matchedCountMap 每个 structure 分类后的各图匹配数量，格式 { [strcture.idx]: { [interInducedGraphKey]: count } }\n * @param structureNum strcuture 个数，与 matchedCountMap.length 对应\n * @param structures\n */\nconst findRepresentStructure = (matchedCountMap, structureNum, structures) => {\n  let maxOffset = Infinity,\n    representClusterType = 0;\n  for (let i = 0; i < structureNum; i++) {\n    // 一种分组的 map，key 是 intGraph 的 key，value 是 structures[i] 的匹配个数\n    const countMapI = matchedCountMap[i];\n    // 按照 value 为该组排序，生成 keys 的数组：\n    const sortedGraphKeys = Object.keys(countMapI).sort((a, b) => {\n      return countMapI[a] - countMapI[b];\n    });\n\n    // 共 100 个 graphKeys，将 graphKeys 按顺序分为 groupNum 组\n    const groupNum = 10;\n    const clusters = []; // 总共有 groupNum 个项\n    sortedGraphKeys.forEach((key, j) => {\n      if (!clusters[j % groupNum])\n        clusters[j % groupNum] = { graphs: [], totalCount: 0, aveCount: 0 };\n      clusters[j % groupNum].graphs.push(key);\n      clusters[j % groupNum].totalCount += countMapI[key];\n    });\n\n    // 计算 cluster 与 cluster 之间的距离 innerDist，每个 cluster 内部的距离 intraDist\n    let aveIntraDist = 0; // 该类的类内平均值\n    const aveCounts = []; // 类内平均匹配数量，将用于计算类间距离\n    clusters.forEach(graphsInCluster => {\n      // 类内均值\n      const aveCount = graphsInCluster.totalCount / graphsInCluster.graphs.length;\n      graphsInCluster.aveCount = aveCount;\n      aveCounts.push(aveCount);\n\n      // 对于每类，计算类内间距平均值\n      let aveIntraPerCluster = 0;\n      const graphsNum = graphsInCluster.length;\n      graphsInCluster.graphs.forEach((graphKey1, j) => {\n        const graph1Count = countMapI[graphKey1];\n        graphsInCluster.graphs.forEach((graphKey2, k) => {\n          if (j === k) return;\n          aveIntraPerCluster += Math.abs(graph1Count - countMapI[graphKey2]);\n        });\n      });\n      aveIntraPerCluster /= (graphsNum * (graphsNum - 1)) / 2;\n      aveIntraDist += aveIntraPerCluster;\n    });\n\n    aveIntraDist /= clusters.length;\n\n    // 用类内均值计算类间距\n    let aveInterDist = 0; // 类间间距平均值\n    aveCounts.forEach((aveCount1, j) => {\n      aveCounts.forEach((aveCount2, k) => {\n        if (j === k) return;\n        aveInterDist += Math.abs(aveCount1 - aveCount2);\n      });\n      aveInterDist /= (aveCounts.length * (aveCounts.length - 1)) / 2;\n    });\n\n    // 寻找 (类间间距均值-类内间距均值) 最大的一种分组方式（对应的 structure 就是最终要找的唯一 DS(G)）\n    const offset = aveInterDist - aveIntraDist;\n    if (maxOffset < offset) {\n      maxOffset = offset;\n      representClusterType = i;\n    }\n  }\n  return {\n    structure: structures[representClusterType],\n    structureCountMap: matchedCountMap[representClusterType],\n  };\n};\n\nconst getNodeMaps = (nodes, nodeLabelProp): { nodeMap: NodeMap; nodeLabelMap: LabelMap } => {\n  const nodeMap: NodeMap = {},\n    nodeLabelMap: LabelMap = {};\n  nodes.forEach((node, i) => {\n    nodeMap[node.id] = { idx: i, node, degree: 0, inDegree: 0, outDegree: 0 };\n    const label = node[nodeLabelProp];\n    if (!nodeLabelMap[label]) nodeLabelMap[label] = [];\n    nodeLabelMap[label].push(node);\n  });\n  return { nodeMap, nodeLabelMap };\n};\n\nconst getEdgeMaps = (\n  edges,\n  edgeLabelProp,\n  nodeMap: NodeMap,\n): { edgeMap: EdgeMap; edgeLabelMap: LabelMap } => {\n  const edgeMap = {},\n    edgeLabelMap = {};\n  edges.forEach((edge, i) => {\n    edgeMap[`${uniqueId}`] = { idx: i, edge };\n    const label = edge[edgeLabelProp];\n    if (!edgeLabelMap[label]) edgeLabelMap[label] = [];\n    edgeLabelMap[label].push(edge);\n\n    const sourceNode = nodeMap[edge.source];\n    if (sourceNode) {\n      sourceNode.degree++;\n      sourceNode.outDegree++;\n    }\n    const targetNode = nodeMap[edge.target];\n    if (targetNode) {\n      targetNode.degree++;\n      targetNode.inDegree++;\n    }\n  });\n  return { edgeMap, edgeLabelMap };\n};\n\n/**\n * 输出最短路径的 map，key 为 sourceNode.id-targetNode.id，value 为这两个节点的最短路径长度\n * @param nodes\n * @param spm\n * @param directed\n */\nconst getSpmMap = (nodes, spm, directed): { [key: string]: number } => {\n  const length = spm.length;\n  const map = {};\n  spm.forEach((row, i) => {\n    const start = directed ? 0 : i + 1;\n    const iId = nodes[i].id;\n    for (let j = start; j < length; j++) {\n      if (i === j) continue;\n      const jId = nodes[j].id;\n      const dist = row[j];\n      map[`${iId}-${jId}`] = dist;\n      if (!directed) map[`${jId}-${iId}`] = dist;\n    }\n  });\n  return map;\n};\n\n/**\n * 计算一对节点（node1，node2）的 NDS 距离\n * @param graph 原图数据\n * @param node1\n * @param node2\n */\nconst getNDSDist = (\n  graph,\n  node1,\n  node2,\n  nodeMap,\n  spDist,\n  kNeighborUnits,\n  structure,\n  nodeLabelProp,\n  edgeLabelProp,\n  cachedNDSMap,\n  cachedInterInducedGraph,\n) => {\n  const key = `${node1.id}-${node2.id}`;\n  if (cachedNDSMap && cachedNDSMap[key]) return cachedNDSMap[key];\n  let interInducedGraph = cachedInterInducedGraph ? cachedInterInducedGraph[key] : undefined;\n  // 若没有缓存相交邻居诱导子图，计算\n  if (!interInducedGraph) {\n    const pairMap: NodePairMap = {\n      [key]: {\n        start: nodeMap[node1.id].idx,\n        end: nodeMap[node2.id].idx,\n        distance: spDist,\n      },\n    };\n\n    cachedInterInducedGraph = getIntersectNeighborInducedGraph(\n      pairMap,\n      kNeighborUnits,\n      graph,\n      cachedInterInducedGraph,\n    );\n    interInducedGraph = cachedInterInducedGraph[key];\n  }\n\n  return getMatchedCount(interInducedGraph, structure, nodeLabelProp, edgeLabelProp);\n};\n\n/**\n * 计算 pattern 上绩点的度数并存储到 minPatternNodeLabelDegreeMap\n */\nconst stashPatternNodeLabelDegreeMap = (minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap, patternNodeLabelMap) => {\n  let minPatternNodeLabelDegree = minPatternNodeLabelDegreeMap[neighborLabel]?.degree;\n  let minPatternNodeLabelInDegree = minPatternNodeLabelDegreeMap[neighborLabel]?.inDegree;\n  let minPatternNodeLabelOutDegree = minPatternNodeLabelDegreeMap[neighborLabel]?.outDegree;\n\n  if (minPatternNodeLabelDegreeMap[neighborLabel] === undefined) {\n    minPatternNodeLabelDegree = Infinity;\n    minPatternNodeLabelInDegree = Infinity;\n    minPatternNodeLabelOutDegree = Infinity;\n    patternNodeLabelMap[neighborLabel].forEach(patternNodeWithLabel => {\n      const patternNodeDegree = patternNodeMap[patternNodeWithLabel.id].degree;\n      if (minPatternNodeLabelDegree > patternNodeDegree)\n        minPatternNodeLabelDegree = patternNodeDegree;\n      const patternNodeInDegree = patternNodeMap[patternNodeWithLabel.id].inDegree;\n      if (minPatternNodeLabelInDegree > patternNodeInDegree)\n        minPatternNodeLabelInDegree = patternNodeInDegree;\n      const patternNodeOutDegree = patternNodeMap[patternNodeWithLabel.id].outDegree;\n      if (minPatternNodeLabelOutDegree > patternNodeOutDegree)\n        minPatternNodeLabelOutDegree = patternNodeOutDegree;\n    });\n    minPatternNodeLabelDegreeMap[neighborLabel] = {\n      degree: minPatternNodeLabelDegree,\n      inDegree: minPatternNodeLabelInDegree,\n      outDegree: minPatternNodeLabelOutDegree\n    };\n  }\n\n  return {\n    minPatternNodeLabelDegree, \n    minPatternNodeLabelInDegree,\n    minPatternNodeLabelOutDegree\n  }\n}\n\n/**\n * GADDI 模式匹配\n * @param graphData 原图数据\n * @param pattern 搜索图（需要在原图上搜索的模式）数据\n * @param directed 是否计算有向图，默认 false\n * @param k 参数 k，表示 k-近邻\n * @param length 参数 length\n * @param nodeLabelProp 节点数据中代表节点标签（分类信息）的属性名。默认为 cluster\n * @param edgeLabelProp 边数据中代表边标签（分类信息）的属性名。默认为 cluster\n */\nconst GADDI = (\n  graphData: GraphData,\n  pattern: GraphData,\n  directed: boolean = false,\n  k: number,\n  length: number,\n  nodeLabelProp: string = 'cluster',\n  edgeLabelProp: string = 'cluster',\n): GraphData[] => {\n  if (!graphData || !graphData.nodes) return;\n  // 分为三步：\n  // 0. 预计算：节点/边数，邻接矩阵、最短路径矩阵\n  // 1. 处理原图 graphData。再分为 1~5 小步\n  // 2. 匹配\n\n  // console.log(\"----- stage-pre: preprocessing -------\");\n\n  // -------- 第零步，预计算：节点/边数，邻接矩阵、最短路径矩阵-------\n  const nodeNum = graphData.nodes.length;\n  if (!nodeNum) return;\n  // console.log(\"----- stage-pre.1: calc shortest path matrix for graph -------\");\n  const spm = floydWarshall(graphData, directed);\n  // console.log(\n  //   \"----- stage-pre.2: calc shortest path matrix for pattern -------\"\n  // );\n  const patternSpm = floydWarshall(pattern, directed);\n  // console.log(\n  //   \"----- stage-pre.3: calc shortest path matrix map for graph -------\"\n  // );\n  const spmMap = getSpmMap(graphData.nodes, spm, directed);\n  // console.log(\n  //   \"----- stage-pre.4: calc shortest path matrix map for pattern -------\"\n  // );\n  const patternSpmMap = getSpmMap(pattern.nodes, patternSpm, directed);\n\n  // console.log(\"----- stage-pre.5: establish maps -------\");\n  // 节点的 map，以 id 为 id 映射，方便后续快速检索\n  const { nodeMap, nodeLabelMap } = getNodeMaps(graphData.nodes, nodeLabelProp);\n  const { nodeMap: patternNodeMap, nodeLabelMap: patternNodeLabelMap } = getNodeMaps(\n    pattern.nodes,\n    nodeLabelProp,\n  );\n\n  // 计算节点度数\n  getEdgeMaps(graphData.edges, edgeLabelProp, nodeMap);\n\n  const { edgeLabelMap: patternEdgeLabelMap } = getEdgeMaps(\n    pattern.edges,\n    edgeLabelProp,\n    patternNodeMap,\n  );\n\n  // 若未指定 length，自动计算 pattern 半径（最短路径最大值）\n  let patternSpmSpread = [];\n  patternSpm?.forEach(row => {\n    patternSpmSpread = patternSpmSpread.concat(row);\n  })\n  if (!length) length = Math.max(...patternSpmSpread, 2);\n  if (!k) k = length;\n\n  // console.log(\"params\", directed, length, k);\n\n  // console.log(\"----- stage-pre.6: calc k neighbor units -------\");\n  // 计算每个节点的 k 邻元集合\n  const kNeighborUnits = findKNeighborUnits(graphData, spm, nodeLabelProp, k);\n  const patternKNeighborUnits = findKNeighborUnits(pattern, patternSpm, nodeLabelProp, k);\n\n  // console.log(\n  //   \"----- stage0: going to processing graph and find intersect neighbor induced graphs -------\"\n  // );\n\n  // console.log(\"----- stage0.1: going to select random node pairs -------\");\n  // -------- 第一步，处理原图 graphData-------\n\n  // 1.1. 随机选择最多 100 个点对，满足距离小于 Length 和 k\n  // 当 graphData 少于 20 个节点，则不能找出 100 个点对，只找出不多于 n(n-1)/2 个点对\n  const maxNodePairNum = Math.min(100, (nodeNum * (nodeNum - 1)) / 2);\n  const nodePairsMap = findNodePairsRandomly(\n    k,\n    nodeNum,\n    maxNodePairNum,\n    kNeighborUnits,\n    spm,\n  );\n\n  // console.log(\n  //   \"----- stage0.2: going to calculate intersect neighbor induced graphs -------\"\n  // );\n  // 1.2. 生成上面节点对的相应相交邻居诱导子图。格式为 {'beginNodeIdx-endNodeIdx': {nodes: [], edges: []}}\n  let intGMap = getIntersectNeighborInducedGraph(nodePairsMap, kNeighborUnits, graphData);\n  // 1.3. 使用 gSpan 算法（frequent graph mining）计算 ISIntG 的前 10 个频率最高的子结构（3-4条边）\n  const top = 10,\n    minSupport = 1,\n    minNodeNum = 1,\n    maxNodeNum = 4;\n  const params = {\n    graphs: intGMap,\n    nodeLabelProp,\n    edgeLabelProp,\n    minSupport,\n    minNodeNum,\n    maxNodeNum,\n    directed,\n  };\n\n  // console.log(\n  //   \"----- stage1: (gSpan) going to find frequent structure dsG -------\"\n  // );\n  // console.log(\"----- stage1.1: going to run gSpan -------\");\n  // 暂时假设生成的 sub structure 都只有一条边\n  const freStructures = gSpan(params).slice(0, top);\n  // structureNum 可能小于 top\n  const structureNum = freStructures.length;\n\n  // 1.4. 计算上述 10 个子结构在 intGMap 中每个诱导子图的匹配个数\n  const matchedCountMap = [];\n  freStructures.forEach((structure, i) => {\n    matchedCountMap[i] = {};\n    Object.keys(intGMap).forEach(key => {\n      const graph = intGMap[key];\n      const subStructureCount = getMatchedCount(graph, structure, nodeLabelProp, edgeLabelProp);\n      matchedCountMap[i][key] = subStructureCount;\n    });\n  });\n\n  // console.log(\n  //   \"----- stage1.1: going to find the most represent strucutre -------\"\n  // );\n\n  // 1.5. 对于每个子结构，根据匹配个数为 intGMap 中的诱导子图分组，生成 structureNum 种分组\n  // 计算每种分组的类间距和类内间距，找到类间距最大、类内间距最小的一种分组，这种分组对应的子结构被选为唯一代表性子结构 DS(G)\n  const { structure: dsG, structureCountMap: ndsDist } = findRepresentStructure(\n    matchedCountMap,\n    structureNum,\n    freStructures,\n  );\n\n  // -------- 第二步，匹配-------\n  // 2.1 找到从 Q 中的一个节点作为起始节点，寻找 G 中的匹配。这个其实节点的标签可以在 G 中找到最多的节点\n  let beginPNode = pattern.nodes[0],\n    candidates = [],\n    label = pattern.nodes[0]?.[nodeLabelProp],\n    maxNodeNumWithSameLabel = -Infinity;\n  pattern.nodes.forEach(node => {\n    const pLabel = node[nodeLabelProp];\n    const nodesWithSameLabel = nodeLabelMap[pLabel]\n    if (nodesWithSameLabel?.length > maxNodeNumWithSameLabel) {\n      maxNodeNumWithSameLabel = nodesWithSameLabel.length;\n      candidates = nodesWithSameLabel;\n      label = pLabel;\n      beginPNode = node;\n    }\n  });\n\n  // console.log(\"----- stage2: going to find candidates -------\");\n\n  // 全局缓存，避免重复计算\n  const minPatternNodeLabelDegreeMap = {}; // key 是 label，value 是该 label 节点的最小度数\n  let patternIntGraphMap = {},\n    patternNDSDist = {}, // key 为 node.id-node.id\n    patternNDSDistMap = {}; // key 为 node.id-label2，value nds距离值数组（按从大到小排序，无需关心具体对应哪个 node2）\n  // 2.2.2 对于 Q 中的另一个标签的 k 个节点，计算它们到 node 的最短路径以及 NDS 距离\n  const patternSpDist = {};\n  const patternSpDistBack = {};\n  Object.keys(patternNodeLabelMap).forEach((label2, j) => {\n    patternSpDist[label2] = [];\n    if (directed) {\n      patternSpDistBack[label2] = [];\n    }\n    let maxDist = -Infinity;\n    const patternNodesWithLabel2 = patternNodeLabelMap[label2];\n    const patternNodePairMap = {};\n    patternNodesWithLabel2.forEach(nodeWithLabel2 => {\n      const dist = patternSpmMap[`${beginPNode.id}-${nodeWithLabel2.id}`];\n      dist && patternSpDist[label2].push(dist);\n      if (maxDist < dist) maxDist = dist;\n      patternNodePairMap[`${beginPNode.id}-${nodeWithLabel2.id}`] = {\n        start: 0,\n        end: patternNodeMap[nodeWithLabel2.id].idx,\n        distance: dist,\n      };\n      if (directed) {\n        const distBack = patternSpmMap[`${nodeWithLabel2.id}-${beginPNode.id}`];\n        distBack && patternSpDistBack[label2].push(distBack);\n      }\n    });\n\n    // spDist[label2] 按照从小到大排序\n    patternSpDist[label2] = patternSpDist[label2].sort((a, b) => a - b);\n    if (directed) patternSpDistBack[label2] = patternSpDistBack[label2].sort((a, b) => a - b);\n\n    // 计算 Q 中所有 label2 节点到 beginPNode 的 NDS 距离\n    // 所有 label2 节点到 beginPNode 的邻居相交诱导子图：\n    // key: node1.id-node2.id\n    patternIntGraphMap = getIntersectNeighborInducedGraph(\n      patternNodePairMap,\n      patternKNeighborUnits,\n      pattern,\n      patternIntGraphMap,\n    );\n    // pattern 中 beginNode 到当前 label2 节点 的 NDS 距离（数组，无需关心具体对应到哪个节点）\n    let currentPatternNDSDistArray = [];\n    Object.keys(patternNodePairMap).forEach(key => {\n      if (patternNDSDist[key]) {\n        currentPatternNDSDistArray.push(patternNDSDist[key]);\n        return; // 缓存过则不需要再次计算\n      }\n      const patternIntGraph = patternIntGraphMap[key];\n      patternNDSDist[key] = getMatchedCount(patternIntGraph, dsG, nodeLabelProp, edgeLabelProp);\n      currentPatternNDSDistArray.push(patternNDSDist[key]);\n    });\n\n    // 根据值为 currentPatternNDSDist 从大到小排序\n    currentPatternNDSDistArray = currentPatternNDSDistArray.sort((a, b) => b - a);\n    patternNDSDistMap[`${beginPNode.id}-${label2}`] = currentPatternNDSDistArray;\n\n    if (label2 === label) return;\n\n    const candidatesNum = candidates?.length || 0;\n    for (let m = candidatesNum - 1; m >= 0; m--) {\n      const cNode = candidates[m];\n\n      // prune1：若 candidates 中节点 cNode 的 kNeighborUnits 中标签为 label2 的节点个数少于 pattern 中 label2 个数，删去它\n      const graphNeighborUnit = kNeighborUnits[nodeMap[cNode.id].idx];\n      const graphNeighborUnitCountMap = graphNeighborUnit.nodeLabelCountMap[label2];\n      const patternLabel2Num = patternNodeLabelMap[label2].length;\n      if (!graphNeighborUnitCountMap || graphNeighborUnitCountMap.count < patternLabel2Num) {\n        candidates.splice(m, 1);\n        continue;\n      }\n\n      // prune2：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点最短路径大于 patternSpDist[label2]，删去它\n      // (prune2 规则即：candidate 相关的最短路径的最大 spDist[label2].length 个，按照大小顺序依次和 patternSpDist[label2] 中的值比较，只要遇到一个是 G > Q 的，就删去这个 candidate)\n      let prune2Invalid = false;\n      for (let n = 0; n < patternLabel2Num; n++) {\n        if (graphNeighborUnitCountMap.dists[n] > patternSpDist[label2][n]) {\n          prune2Invalid = true;\n          break;\n        }\n      }\n      if (prune2Invalid) {\n        candidates.splice(m, 1);\n        continue;\n      }\n\n      // prune3：若 candidates 中节点 cNode 到 kNeighborUnits 中标签为 label2 的节点 NDS 距离小于 patternNDSDist[beginNode.id-label2]，删去它\n      // TODO：prune3，currentPatternNDSDistArray 与 currentNDSDist 的比较\n\n      // 计算 G 中所有 label2 节点到 cNode 的 NDS 距离\n      // 所有 label2 节点到 cNode 的邻居相交诱导子图：\n      const cNodePairMap = {};\n      graphNeighborUnit.neighbors.forEach(neighborNode => {\n        const dist = spmMap[`${cNode.id}-${neighborNode.id}`];\n        cNodePairMap[`${cNode.id}-${neighborNode.id}`] = {\n          start: nodeMap[cNode.id].idx,\n          end: nodeMap[neighborNode.id].idx,\n          distance: dist,\n        };\n      });\n      // 更新 intGMap\n      intGMap = getIntersectNeighborInducedGraph(cNodePairMap, kNeighborUnits, graphData, intGMap);\n      // candidate 到它周围 label2 节点的 NDS 距离, key 是 node.id-node.id\n      let currentNDSDistArray = [];\n      Object.keys(cNodePairMap).forEach(key => {\n        if (ndsDist[key]) {\n          currentNDSDistArray.push(ndsDist[key]);\n          return; // 缓存过则不需要再次计算\n        }\n        const intGraph = intGMap[key];\n        ndsDist[key] = getMatchedCount(intGraph, dsG, nodeLabelProp, edgeLabelProp);\n        currentNDSDistArray.push(ndsDist[key]);\n      });\n\n      // 根据值为 currentNDSDistArray 从大到小排序\n      currentNDSDistArray = currentNDSDistArray.sort((a, b) => b - a);\n\n      let prune3Invalid = false;\n      for (let n = 0; n < patternLabel2Num; n++) {\n        if (currentNDSDistArray[n] < currentPatternNDSDistArray[n]) {\n          prune3Invalid = true;\n          break;\n        }\n      }\n      if (prune3Invalid) {\n        candidates.splice(m, 1);\n        continue;\n      }\n    }\n  });\n\n  const candidateGraphs = [];\n\n  // console.log(\n  //   \"----- stage3: going to splice neighbors for each candidate graph -------\"\n  // );\n\n  // candidates 经过筛选后，以每个 candidate 为中心，生成 Length-neighbor 的邻居诱导子图\n  // 并在诱导子图中去除不可能在 Q 上找到匹配的点：在 Q 上不存在的 label，其他 label 到 candidate 的最大最短距离符合 Q、NDS 距离符合 Q\n  candidates?.forEach(candidate => {\n    const nodeIdx = nodeMap[candidate.id].idx;\n    const lengthNeighborUnit = findKNeighborUnit(\n      graphData.nodes,\n      spm[nodeIdx],\n      nodeIdx,\n      nodeLabelProp,\n      length,\n    );\n\n    const neighborNodes = lengthNeighborUnit.neighbors;\n\n    // 删除不可能找到匹配的邻居点\n    const neighborNum = neighborNodes.length;\n    let unmatched = false;\n    for (let i = neighborNum - 1; i >= 0; i--) {\n      // 如果通过裁剪，符合条件的节点数量已过少，说明不能匹配这个 candidate 相关的图\n      if (neighborNodes.length + 1 < pattern.nodes.length) {\n        unmatched = true;\n        return;\n      }\n      const neighborNode = neighborNodes[i];\n      const neighborLabel = neighborNode[nodeLabelProp];\n      // prune1: 若该邻居点的 label 不存在于 pattern 中，移除这个点\n      if (!patternNodeLabelMap[neighborLabel] || !patternNodeLabelMap[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      // prune2: 若该邻居点到 candidate 的最短路径比和它有相同 label 的节点到 beginPNode 的最大最短路径长度长，移除这个点\n      // prune2.1: 如果没有这个标签到 beginPNode 的距离记录，说明 pattern 上（可能 beginPNode 是这个 label）没有其他这个 label 的节点\n      if (!patternSpDist[neighborLabel] || !patternSpDist[neighborLabel].length) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      const key = `${candidate.id}-${neighborNode.id}`;\n\n      // prune2.2\n      const distToCandidate = spmMap[key];\n      let idx = patternSpDist[neighborLabel].length - 1;\n      let maxDistWithLabelInPattern = patternSpDist[neighborLabel][idx]; // patternSpDist[neighborLabel] 已经按照从小到大排序\n      if (distToCandidate > maxDistWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n    if (directed) {\n      const keyBack = `${neighborNode.id}-${candidate.id}`;\n      const distFromCandidate = spmMap[keyBack];\n      idx = patternSpDistBack[neighborLabel].length - 1;\n      let maxBackDistWithLabelInPattern = patternSpDistBack[neighborLabel][idx];\n      if (distFromCandidate > maxBackDistWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n    }\n\n      // prune3: 若该邻居点到 candidate 的 NDS 距离比和它有相同 label 的节点到 beginPNode 的最小 NDS 距离小，移除这个点\n      const ndsToCandidate = ndsDist[key]\n        ? ndsDist[key]\n        : getNDSDist(\n            graphData,\n            candidate,\n            neighborNode,\n            nodeMap,\n            distToCandidate,\n            kNeighborUnits,\n            dsG,\n            nodeLabelProp,\n            edgeLabelProp,\n            ndsDist,\n            intGMap,\n          );\n      const patternKey = `${beginPNode.id}-${neighborLabel}`;\n      const minNdsWithLabelInPattern =\n        patternNDSDistMap[patternKey][patternNDSDistMap[patternKey].length - 1]; // patternNDSDist[key] 一定存在\n      if (ndsToCandidate < minNdsWithLabelInPattern) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n\n      // prune4: 若该邻居点的度数小于 pattern 同 label 节点最小度数，删去该点\n      const {\n        minPatternNodeLabelDegree,\n        minPatternNodeLabelInDegree,\n        minPatternNodeLabelOutDegree\n      } = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, neighborLabel, patternNodeMap,patternNodeLabelMap);\n\n      if (nodeMap[neighborNode.id].degree < minPatternNodeLabelDegree) {\n        neighborNodes.splice(i, 1);\n        continue;\n      }\n    }\n\n    // 节点在个数上符合匹配（不少于 pattern 的节点个数），现在筛选相关边\n    if (!unmatched) {\n      candidateGraphs.push({\n        nodes: [candidate].concat(neighborNodes),\n      });\n    }\n  });\n\n  // console.log(\n  //   \"----- stage4: going to splice edges and neighbors for each candidate graph -------\"\n  // );\n\n  const { length: undirectedLengthsToBeginPNode } = dijkstra(pattern, beginPNode.id, false);\n\n  let undirectedLengthsToBeginPNodeLabelMap = {};\n  if (directed) {\n    Object.keys(undirectedLengthsToBeginPNode).forEach(nodeId => {\n      const nodeLabel = patternNodeMap[nodeId].node[nodeLabelProp];\n      if (!undirectedLengthsToBeginPNodeLabelMap[nodeLabel])\n        undirectedLengthsToBeginPNodeLabelMap[nodeLabel] = [undirectedLengthsToBeginPNode[nodeId]];\n      else\n        undirectedLengthsToBeginPNodeLabelMap[nodeLabel].push(\n          undirectedLengthsToBeginPNode[nodeId],\n        );\n    });\n    Object.keys(undirectedLengthsToBeginPNodeLabelMap).forEach(pLabel => {\n      undirectedLengthsToBeginPNodeLabelMap[pLabel].sort((a, b) => a - b);\n    });\n  } else {\n    undirectedLengthsToBeginPNodeLabelMap = patternSpDist;\n  }\n\n  // 现在 candidateGraphs 里面只有节点，进行边的筛选\n  let candidateGraphNum = candidateGraphs.length;\n  for (let i = candidateGraphNum - 1; i >= 0; i--) {\n    const candidateGraph = candidateGraphs[i];\n    const candidate = candidateGraph.nodes[0];\n\n    const candidateNodeLabelCountMap = {};\n    const candidateNodeMap = {};\n    candidateGraph.nodes.forEach((node, q) => {\n      candidateNodeMap[node.id] = {\n        idx: q,\n        node,\n        degree: 0,\n        inDegree: 0,\n        outDegree: 0\n      };\n      const cNodeLabel = node[nodeLabelProp];\n      if (!candidateNodeLabelCountMap[cNodeLabel]) candidateNodeLabelCountMap[cNodeLabel] = 1;\n      else candidateNodeLabelCountMap[cNodeLabel]++;\n    });\n\n    // 根据 candidate 和 neighborNodes 中的节点生成 G 的诱导子图\n    // 即，将 graphData 上两端都在 candidateGraph.nodes 中的边放入 candidateEdges\n    const candidateEdges = [];\n    const edgeLabelCountMap = {};\n    graphData.edges.forEach(edge => {\n      if (candidateNodeMap[edge.source] && candidateNodeMap[edge.target]) {\n        candidateEdges.push(edge);\n        if (!edgeLabelCountMap[edge[edgeLabelProp]]) edgeLabelCountMap[edge[edgeLabelProp]] = 1;\n        else edgeLabelCountMap[edge[edgeLabelProp]]++;\n        candidateNodeMap[edge.source].degree++;\n        candidateNodeMap[edge.target].degree++;\n        candidateNodeMap[edge.source].outDegree++;\n        candidateNodeMap[edge.target].inDegree++;\n      }\n    });\n\n    // prune：若有一个 edgeLabel 在 candidateGraph 上的个数少于 pattern，去除该图\n    const pattenrEdgeLabelNum = Object.keys(patternEdgeLabelMap).length;\n    let prunedByEdgeLabel = false;\n    for (let e = 0; e < pattenrEdgeLabelNum; e++) {\n      const label = Object.keys(patternEdgeLabelMap)[e];\n      if (\n        !edgeLabelCountMap[label] ||\n        edgeLabelCountMap[label] < patternEdgeLabelMap[label].length\n      ) {\n        prunedByEdgeLabel = true;\n        break;\n      }\n    }\n    if (prunedByEdgeLabel) {\n      candidateGraphs.splice(i, 1);\n      continue;\n    }\n\n    // 遍历 candidateEdges，进行边的筛选\n    let candidateEdgeNum = candidateEdges.length;\n\n    // prune：若边数过少，去除该图\n    if (candidateEdgeNum < pattern.edges.length) {\n      candidateGraphs.splice(i, 1);\n      break;\n    }\n    let candidateGraphInvalid = false;\n    for (let e = candidateEdgeNum - 1; e >= 0; e--) {\n      const edge = candidateEdges[e];\n      const edgeLabel = edge[edgeLabelProp];\n      const patternEdgesWithLabel = patternEdgeLabelMap[edgeLabel];\n\n      // prune 1: 若边的 label 不存在于 pattern 边 label 中，去除该边\n      if (!patternEdgesWithLabel || !patternEdgesWithLabel.length) {\n        edgeLabelCountMap[edgeLabel]--;\n        // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          break;\n        }\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        continue;\n      }\n\n      // prune 2: 若边的 label +两端 label 的三元组关系不能在 pattern 中找到，去除该边\n      const sourceLabel = candidateNodeMap[edge.source].node[nodeLabelProp];\n      const targetLabel = candidateNodeMap[edge.target].node[nodeLabelProp];\n\n      let edgeMatched = false;\n      patternEdgesWithLabel.forEach(patternEdge => {\n        const patternSource = patternNodeMap[patternEdge.source].node;\n        const patternTarget = patternNodeMap[patternEdge.target].node;\n        if (\n          patternSource[nodeLabelProp] === sourceLabel &&\n          patternTarget[nodeLabelProp] === targetLabel\n        )\n          edgeMatched = true;\n        if (\n          !directed &&\n          patternSource[nodeLabelProp] === targetLabel &&\n          patternTarget[nodeLabelProp] === sourceLabel\n        )\n          edgeMatched = true;\n      });\n      if (!edgeMatched) {\n        edgeLabelCountMap[edgeLabel]--;\n        // 若这个 label 的 count 减少之后，该 label 的边数不足，去除该图\n        if (patternEdgesWithLabel && edgeLabelCountMap[edgeLabel] < patternEdgesWithLabel.length) {\n          candidateGraphInvalid = true;\n          break;\n        }\n        candidateEdges.splice(e, 1);\n        candidateNodeMap[edge.source].degree--;\n        candidateNodeMap[edge.target].degree--;\n        candidateNodeMap[edge.source].outDegree--;\n        candidateNodeMap[edge.target].inDegree--;\n        continue;\n      }\n    }\n\n    // prune2: 删除边的过程中，发现边数过少/边 label 数过少时，去除该图\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      continue;\n    }\n\n    candidateGraph.edges = candidateEdges;\n\n    const { length: lengthsToCandidate } = dijkstra(\n      candidateGraph,\n      candidateGraph.nodes[0].id,\n      false, // 此处计算路径长度用于判断是否连通，因此使用无向图\n    );\n    Object.keys(lengthsToCandidate)\n      .reverse()\n      .forEach(targetId => {\n        if (targetId === candidateGraph.nodes[0].id || candidateGraphInvalid) return;\n        // prune4: 通过上述裁剪，可能导致该邻居子图变为不连通。裁剪掉目前在这个邻居子图中和 candidate（第一个节点）不连通的节点\n        if (lengthsToCandidate[targetId] === Infinity) {\n          const targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n          candidateNodeLabelCountMap[targetNodeLabel]--;\n          if (\n            candidateNodeLabelCountMap[targetNodeLabel] <\n            patternNodeLabelMap[targetNodeLabel].length\n          ) {\n            candidateGraphInvalid = true;\n            return;\n          }\n          const idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n          candidateGraph.nodes.splice(idx, 1);\n          candidateNodeMap[targetId] = undefined;\n          return;\n        }\n        // prune5: 经过边裁剪后，可能又出现了最短路径过长的节点 （比 pattern 中同 label 的节点到 beginNode 最大最短距离远），删去这些节点\n        const nLabel = nodeMap[targetId].node[nodeLabelProp];\n        if (\n          !undirectedLengthsToBeginPNodeLabelMap[nLabel] ||\n          !undirectedLengthsToBeginPNodeLabelMap[nLabel].length ||\n          lengthsToCandidate[targetId] >\n            undirectedLengthsToBeginPNodeLabelMap[nLabel][\n              undirectedLengthsToBeginPNodeLabelMap[nLabel].length - 1\n            ]\n        ) {\n          const targetNodeLabel = candidateNodeMap[targetId].node[nodeLabelProp];\n          candidateNodeLabelCountMap[targetNodeLabel]--;\n          if (\n            candidateNodeLabelCountMap[targetNodeLabel] <\n            patternNodeLabelMap[targetNodeLabel].length\n          ) {\n            candidateGraphInvalid = true;\n            return;\n          }\n          const idx = candidateGraph.nodes.indexOf(candidateNodeMap[targetId].node);\n          candidateGraph.nodes.splice(idx, 1);\n          candidateNodeMap[targetId] = undefined;\n        }\n      });\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      continue;\n    }\n\n    let degreeChanged = true;\n    let loopCount = 0;\n    while (degreeChanged && !candidateGraphInvalid) {\n      degreeChanged = false;\n\n      // candidate 度数不足，删去该图\n      const condition = directed ? (candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree || \n        candidateNodeMap[candidate.id].inDegree < patternNodeMap[beginPNode.id].inDegree ||\n        candidateNodeMap[candidate.id].outDegree < patternNodeMap[beginPNode.id].outDegree) :\n        candidateNodeMap[candidate.id].degree < patternNodeMap[beginPNode.id].degree;\n      if (condition) {\n        candidateGraphInvalid = true;\n        break;\n      }\n      // candidate label 个数不足，删去该图\n      if (\n        candidateNodeLabelCountMap[candidate[nodeLabelProp]] <\n        patternNodeLabelMap[candidate[nodeLabelProp]].length\n      ) {\n        candidateGraphInvalid = true;\n        break;\n      }\n\n      // prune6：去除度数过小的节点\n      const currentCandidateNodeNum = candidateGraph.nodes.length;\n      for (let o = currentCandidateNodeNum - 1; o >= 0; o--) {\n        const cgNode = candidateGraph.nodes[o];\n        const nodeDegree = candidateNodeMap[cgNode.id].degree;\n        const nodeInDegree = candidateNodeMap[cgNode.id].inDegree;\n        const nodeOutDegree = candidateNodeMap[cgNode.id].outDegree;\n        const cNodeLabel = cgNode[nodeLabelProp];\n        \n        const {\n          minPatternNodeLabelDegree,\n          minPatternNodeLabelInDegree,\n          minPatternNodeLabelOutDegree\n        } = stashPatternNodeLabelDegreeMap(minPatternNodeLabelDegreeMap, cNodeLabel, patternNodeMap,patternNodeLabelMap);\n        \n        const deleteCondition = directed ? (nodeDegree < minPatternNodeLabelDegree || \n          nodeInDegree < minPatternNodeLabelInDegree ||\n          nodeOutDegree < minPatternNodeLabelOutDegree) :\n          nodeDegree < minPatternNodeLabelDegree;\n        if (deleteCondition) {\n          candidateNodeLabelCountMap[cgNode[nodeLabelProp]]--;\n          // 节点 label 个数不足\n          if (\n            candidateNodeLabelCountMap[cgNode[nodeLabelProp]] <\n            patternNodeLabelMap[cgNode[nodeLabelProp]].length\n          ) {\n            candidateGraphInvalid = true;\n            break;\n          }\n          candidateGraph.nodes.splice(o, 1);\n          candidateNodeMap[cgNode.id] = undefined;\n          degreeChanged = true;\n        }\n      }\n      if (candidateGraphInvalid || (!degreeChanged && loopCount !== 0)) break;\n      // 经过 prune5 节点裁剪，删去端点已经不在 candidateGraph 中的边\n      candidateEdgeNum = candidateEdges.length;\n      for (let y = candidateEdgeNum - 1; y >= 0; y--) {\n        const cedge = candidateEdges[y];\n        if (!candidateNodeMap[cedge.source] || !candidateNodeMap[cedge.target]) {\n          candidateEdges.splice(y, 1);\n          const edgeLabel = cedge[edgeLabelProp];\n          edgeLabelCountMap[edgeLabel]--;\n          if (candidateNodeMap[cedge.source]) {\n            candidateNodeMap[cedge.source].degree--;\n            candidateNodeMap[cedge.source].outDegree--;\n          }\n          if (candidateNodeMap[cedge.target]) {\n            candidateNodeMap[cedge.target].degree--;\n            candidateNodeMap[cedge.target].inDegree--;\n          }\n          // 边 label 数量不足\n          if (\n            patternEdgeLabelMap[edgeLabel] &&\n            edgeLabelCountMap[edgeLabel] < patternEdgeLabelMap[edgeLabel].length\n          ) {\n            candidateGraphInvalid = true;\n            break;\n          }\n          degreeChanged = true;\n        }\n      }\n      loopCount++;\n    }\n\n    if (candidateGraphInvalid) {\n      candidateGraphs.splice(i, 1);\n      continue;\n    }\n\n    // prune: 若节点/边数过少，节点/边 label 过少，去掉这个图\n    if (\n      candidateGraphInvalid ||\n      candidateGraph.nodes.length < pattern.nodes.length ||\n      candidateEdges.length < pattern.edges.length\n    ) {\n      candidateGraphs.splice(i, 1);\n      continue;\n    }\n  }\n\n  // 此时已经生成的多个 candidateGraphs，可能有重复\n\n  // console.log(\n  //   \"----- stage5: going to splice dulplicated candidate graphs -------\"\n  // );\n\n  // 删去 candidateGraphs 中一模一样的子图，通过边的 node-node-edgeLabel 作为 key，这类边个数作为 value，进行匹配\n  let currentLength = candidateGraphs.length;\n  for (let i = 0; i <= currentLength - 1; i++) {\n    const cg1 = candidateGraphs[i];\n    const cg1EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n    cg1.edges.forEach(edge => {\n      const key = `${edge.source}-${edge.target}-${edge.label}`;\n      if (!cg1EdgeMap[key]) cg1EdgeMap[key] = 1;\n      else cg1EdgeMap[key]++;\n    });\n\n    for (let j = currentLength - 1; j > i; j--) {\n      const cg2 = candidateGraphs[j];\n      const cg2EdgeMap = {}; // [node1.id-node2.id-edge.label]: count\n      cg2.edges.forEach(edge => {\n        const key = `${edge.source}-${edge.target}-${edge.label}`;\n        if (!cg2EdgeMap[key]) cg2EdgeMap[key] = 1;\n        else cg2EdgeMap[key]++;\n      });\n\n      let same = true;\n      if (Object.keys(cg2EdgeMap).length !== Object.keys(cg1EdgeMap).length) {\n        same = false;\n      } else {\n        Object.keys(cg1EdgeMap).forEach(key => {\n          if (cg2EdgeMap[key] !== cg1EdgeMap[key]) same = false;\n        });\n      }\n      if (same) {\n        candidateGraphs.splice(j, 1);\n      }\n    }\n    currentLength = candidateGraphs.length;\n  }\n\n  return candidateGraphs;\n};\n\nexport default GADDI;\n","import LinkedList from './linked-list';\n\nexport default class Stack {\n\n  private linkedList: LinkedList;\n\n  private maxStep: number;\n\n  constructor(maxStep: number = 10) {\n    this.linkedList = new LinkedList();\n    this.maxStep = maxStep;\n  }\n\n  get length() {\n    return this.linkedList.toArray().length;\n  }\n\n  /**\n   * 判断栈是否为空，如果链表中没有头部元素，则栈为空\n   */\n  isEmpty() {\n    return !this.linkedList.head;\n  }\n\n  /**\n   * 是否到定义的栈的最大长度，如果达到最大长度后，不再允许入栈\n   */\n  isMaxStack() {\n    return this.toArray().length >= this.maxStep;\n  }\n\n  /**\n   * 访问顶端元素\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    // 返回头部元素，不删除元素\n    return this.linkedList.head.value;\n  }\n\n  push(value) {\n    this.linkedList.prepend(value);\n    if (this.length > this.maxStep) {\n      this.linkedList.deleteTail();\n    }\n  }\n\n  pop() {\n    const removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  }\n\n  toArray() {\n    return this.linkedList.toArray().map((node) => node.value);\n  }\n\n  clear() {\n    while (!this.isEmpty()) {\n      this.pop();\n    }\n  }\n}\n","import getAdjMatrix from './adjacent-matrix';\nimport breadthFirstSearch from './bfs';\nimport connectedComponent from './connected-component';\nimport getDegree from './degree';\nimport { getInDegree, getOutDegree } from './degree';\nimport detectCycle, { detectAllCycles, detectAllDirectedCycle, detectAllUndirectedCycle } from './detect-cycle';\nimport depthFirstSearch from './dfs';\nimport dijkstra from './dijkstra';\nimport { findAllPath, findShortestPath } from './find-path';\nimport floydWarshall from './floydWarshall';\nimport labelPropagation from './label-propagation';\nimport louvain from './louvain';\nimport iLouvain from './i-louvain';\nimport kCore from './k-core';\nimport kMeans from './k-means';\nimport cosineSimilarity from './cosine-similarity';\nimport nodesCosineSimilarity from './nodes-cosine-similarity';\nimport minimumSpanningTree from './mts';\nimport pageRank from './pageRank';\nimport GADDI from './gaddi';\nimport Stack from './structs/stack';\nimport { getNeighbors } from './util';\nimport { IAlgorithm } from './types';\n\nconst detectDirectedCycle = detectCycle;\n\nexport {\n  getAdjMatrix,\n  breadthFirstSearch,\n  connectedComponent,\n  getDegree,\n  getInDegree,\n  getOutDegree,\n  detectCycle,\n  detectDirectedCycle,\n  detectAllCycles,\n  detectAllDirectedCycle,\n  detectAllUndirectedCycle,\n  depthFirstSearch,\n  dijkstra,\n  findAllPath,\n  findShortestPath,\n  floydWarshall,\n  labelPropagation,\n  louvain,\n  iLouvain,\n  kCore,\n  kMeans,\n  cosineSimilarity,\n  nodesCosineSimilarity,\n  minimumSpanningTree,\n  pageRank,\n  getNeighbors,\n  Stack,\n  GADDI,\n  IAlgorithm\n};\n\nexport default {\n  getAdjMatrix,\n  breadthFirstSearch,\n  connectedComponent,\n  getDegree,\n  getInDegree,\n  getOutDegree,\n  detectCycle,\n  detectDirectedCycle,\n  detectAllCycles,\n  detectAllDirectedCycle,\n  detectAllUndirectedCycle,\n  depthFirstSearch,\n  dijkstra,\n  findAllPath,\n  findShortestPath,\n  floydWarshall,\n  labelPropagation,\n  louvain,\n  iLouvain,\n  kCore,\n  kMeans,\n  cosineSimilarity,\n  nodesCosineSimilarity,\n  minimumSpanningTree,\n  pageRank,\n  getNeighbors,\n  Stack,\n  GADDI,\n};","import Queue from './structs/queue'\nimport { GraphData, IAlgorithmCallbacks } from './types';\nimport { getNeighbors } from './util';\n\n/**\n *\n * @param callbacks\n * allowTraversal: 确定 BFS 是否从顶点沿着边遍历到其邻居，默认情况下，同一个节点只能遍历一次\n * enterNode: 当 BFS 访问某个节点时调用\n * leaveNode: 当 BFS 访问访问结束某个节点时调用\n */\nfunction initCallbacks(callbacks: IAlgorithmCallbacks = {} as IAlgorithmCallbacks) {\n  const initiatedCallback = callbacks;\n\n  const stubCallback = () => {};\n\n  const allowTraversalCallback = (() => {\n    const seen = {};\n    return ({ next }) => {\n      const id = next;\n      if (!seen[id]) {\n        seen[id] = true;\n        return true;\n      }\n      return false;\n    };\n  })();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n\n  return initiatedCallback;\n}\n\n/**\n * 广度优先遍历图\n * @param graph Graph 图实例\n * @param startNode 开始遍历的节点\n * @param originalCallbacks 回调\n */\nconst breadthFirstSearch = (\n  graphData: GraphData,\n  startNodeId: string,\n  originalCallbacks?: IAlgorithmCallbacks,\n  directed: boolean = true\n) => {\n  const callbacks = initCallbacks(originalCallbacks);\n  const nodeQueue = new Queue();\n\n  const { edges = [] } = graphData\n\n  // 初始化队列元素\n  nodeQueue.enqueue(startNodeId);\n\n  let previousNode = '';\n\n  // 遍历队列中的所有顶点\n  while (!nodeQueue.isEmpty()) {\n    const currentNode: string = nodeQueue.dequeue();\n    callbacks.enter({\n      current: currentNode,\n      previous: previousNode,\n    });\n\n    // 将所有邻居添加到队列中以便遍历\n    getNeighbors(currentNode, edges, directed ? 'target' : undefined).forEach((nextNode) => {\n      if (\n        callbacks.allowTraversal({\n          previous: previousNode,\n          current: currentNode,\n          next: nextNode,\n        })\n      ) {\n        nodeQueue.enqueue(nextNode);\n      }\n    });\n\n    callbacks.leave({\n      current: currentNode,\n      previous: previousNode,\n    });\n\n    // 下一次循环之前存储当前顶点\n    previousNode = currentNode;\n  }\n};\n\nexport default breadthFirstSearch;\n","import dijkstra from './dijkstra';\nimport { GraphData } from './types';\nimport { getNeighbors } from './util';\n\nexport const findShortestPath = (\n  graphData: GraphData,\n  start: string,\n  end: string,\n  directed?: boolean,\n  weightPropertyName?: string\n) => {\n  const { length, path, allPath } = dijkstra(\n    graphData,\n    start,\n    directed,\n    weightPropertyName\n  );\n  return { length: length[end], path: path[end], allPath: allPath[end] };\n};\n\nexport const findAllPath = (\n  graphData: GraphData,\n  start: string,\n  end: string,\n  directed?: boolean\n) => {\n  if (start === end) return [[start]];\n\n  const { edges = [] } = graphData;\n\n  const visited = [start];\n  const isVisited = { [start]: true };\n  const stack: string[][] = []; // 辅助栈，用于存储访问过的节点的邻居节点\n  const allPath = [];\n  let neighbors = directed\n    ? getNeighbors(start, edges, 'target')\n    : getNeighbors(start, edges);\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    const children = stack[stack.length - 1];\n    if (children.length) {\n      const child = children.shift();\n      if (child) {\n        visited.push(child);\n        isVisited[child] = true;\n        neighbors = directed\n          ? getNeighbors(child, edges, 'target')\n          : getNeighbors(child, edges);\n        stack.push(neighbors.filter(neighbor => !isVisited[neighbor]));\n      }\n    } else {\n      const node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      const path = visited.map(node => node);\n      allPath.push(path);\n\n      const node = visited.pop();\n      isVisited[node] = false;\n      stack.pop();\n    }\n  }\n\n  return allPath;\n};\n","\nimport getAdjMatrix from './adjacent-matrix'\nimport { uniqueId } from './util';\nimport { GraphData, ClusterData } from './types';\n\n/**\n * 标签传播算法\n * @param graphData 图数据\n * @param directed 是否有向图，默认为 false\n * @param weightPropertyName 权重的属性字段\n * @param maxIteration 最大迭代次数\n */\nconst labelPropagation = (\n  graphData: GraphData,\n  directed: boolean = false,\n  weightPropertyName: string = 'weight',\n  maxIteration: number = 1000\n): ClusterData => {\n  // the origin data\n  const { nodes = [], edges = [] } = graphData;\n\n  const clusters = {};\n  const nodeMap = {};\n  // init the clusters and nodeMap\n  nodes.forEach((node, i) => {\n    const cid: string = uniqueId();\n    node.clusterId = cid;\n    clusters[cid] = {\n      id: cid,\n      nodes: [node]\n    };\n    nodeMap[node.id] = {\n      node,\n      idx: i\n    };\n  });\n\n  // the adjacent matrix of calNodes inside clusters\n  const adjMatrix = getAdjMatrix(graphData, directed);\n  // the sum of each row in adjacent matrix\n  const ks = [];\n  /**\n   * neighbor nodes (id for key and weight for value) for each node\n   * neighbors = {\n   *  id(node_id): { id(neighbor_1_id): weight(weight of the edge), id(neighbor_2_id): weight(weight of the edge), ... },\n   *  ...\n   * }\n   */\n  const neighbors = {};\n  adjMatrix.forEach((row, i) => {\n    let k = 0;\n    const iid = nodes[i].id;\n    neighbors[iid] = {};\n    row.forEach((entry, j) => {\n      if (!entry) return;\n      k += entry;\n      const jid = nodes[j].id;\n      neighbors[iid][jid] = entry;\n    });\n    ks.push(k);\n  });\n\n  let iter = 0;\n\n  while (iter < maxIteration) {\n    let changed = false;\n    nodes.forEach(node => {\n      const neighborClusters = {};\n      Object.keys(neighbors[node.id]).forEach(neighborId => {\n        const neighborWeight = neighbors[node.id][neighborId];\n        const neighborNode = nodeMap[neighborId].node;\n        const neighborClusterId = neighborNode.clusterId;\n        if (!neighborClusters[neighborClusterId]) neighborClusters[neighborClusterId] = 0;\n        neighborClusters[neighborClusterId] += neighborWeight;\n      });\n      // find the cluster with max weight\n      let maxWeight = -Infinity;\n      let bestClusterIds = [];\n      Object.keys(neighborClusters).forEach(clusterId => {\n        if (maxWeight < neighborClusters[clusterId]) {\n          maxWeight = neighborClusters[clusterId];\n          bestClusterIds = [clusterId];\n        } else if (maxWeight === neighborClusters[clusterId]) {\n          bestClusterIds.push(clusterId);\n        }\n      });\n      if (bestClusterIds.length === 1 && bestClusterIds[0] === node.clusterId) return;\n      const selfClusterIdx = bestClusterIds.indexOf(node.clusterId);\n      if (selfClusterIdx >= 0) bestClusterIds.splice(selfClusterIdx, 1);\n      if (bestClusterIds && bestClusterIds.length) {\n        changed = true;\n\n        // remove from origin cluster\n        const selfCluster = clusters[node.clusterId as string];\n        const nodeInSelfClusterIdx = selfCluster.nodes.indexOf(node);\n        selfCluster.nodes.splice(nodeInSelfClusterIdx, 1);\n\n        // move the node to the best cluster\n        const randomIdx = Math.floor(Math.random() * bestClusterIds.length);\n        const bestCluster = clusters[bestClusterIds[randomIdx]];\n        bestCluster.nodes.push(node);\n        node.clusterId = bestCluster.id;\n      }\n    });\n    if (!changed) break;\n    iter++;\n  }\n\n  // delete the empty clusters\n  Object.keys(clusters).forEach(clusterId => {\n    const cluster = clusters[clusterId];\n    if (!cluster.nodes || !cluster.nodes.length) {\n      delete clusters[clusterId];\n    }\n  });\n\n  // get the cluster edges\n  const clusterEdges = [];\n  const clusterEdgeMap = {};\n  edges.forEach(edge => {\n    const { source, target } = edge;\n    const weight = edge[weightPropertyName] || 1;\n    const sourceClusterId = nodeMap[source].node.clusterId;\n    const targetClusterId = nodeMap[target].node.clusterId;\n    const newEdgeId = `${sourceClusterId}---${targetClusterId}`;\n    if (clusterEdgeMap[newEdgeId]) {\n      clusterEdgeMap[newEdgeId].weight += weight;\n      clusterEdgeMap[newEdgeId].count++;\n    } else {\n      const newEdge = {\n        source: sourceClusterId,\n        target: targetClusterId,\n        weight,\n        count: 1\n      };\n      clusterEdgeMap[newEdgeId] = newEdge;\n      clusterEdges.push(newEdge);\n    }\n  });\n\n  const clustersArray = [];\n  Object.keys(clusters).forEach(clusterId => {\n    clustersArray.push(clusters[clusterId]);\n  });\n  return {\n    clusters: clustersArray,\n    clusterEdges\n  }\n}\n\nexport default labelPropagation;\n","import louvain from './louvain';\nimport type { ClusterData, GraphData } from './types';\n\n/**\n * 社区发现 i-louvain 算法：模块度 + 惯性模块度（即节点属性相似性）\n * @param graphData 图数据\n * @param directed 是否有向图，默认为 false\n * @param weightPropertyName 权重的属性字段\n * @param threshold 差值阈值\n * @param inertialWeight 惯性模块度权重\n */\nconst iLouvain = (\n    graphData: GraphData,\n    directed: boolean = false,\n    weightPropertyName: string = 'weight',\n    threshold: number = 0.0001,\n    inertialWeight: number = 1,\n  ): ClusterData => {\n  return louvain(graphData, directed, weightPropertyName, threshold, true, inertialWeight);\n}\n\nexport default iLouvain;","\nimport { clone } from '@antv/util';\nimport degree from './degree';\nimport { GraphData } from './types';\n/**\n *  k-core算法 找出符合指定核心度的紧密关联的子图结构\n * @param graphData 图数据\n * @param k 核心度数\n */\nconst kCore = (\n    graphData: GraphData,\n    k: number = 1,\n  ): GraphData => {\n    const data = clone(graphData);\n    const { nodes = [] } = data;\n    let { edges = [] } = data;\n    while (true) {\n        // 获取图中节点的度数\n        const degrees = degree({ nodes, edges});\n        const nodeIds = Object.keys(degrees);\n        // 按照度数进行排序\n        nodeIds.sort((a, b) => degrees[a]?.degree - degrees[b]?.degree);\n        const minIndexId = nodeIds[0];\n        if (!nodes.length || degrees[minIndexId]?.degree >= k) {\n            break;\n        }\n        const originIndex = nodes.findIndex(node => node.id === minIndexId);\n        // 移除度数小于k的节点\n        nodes.splice(originIndex, 1);\n        // 移除度数小于k的节点相关的边\n        edges = edges.filter(edge => !(edge.source === minIndexId || edge.target === minIndexId));\n    }\n    \n    return { nodes, edges };\n}\n\nexport default kCore;\n","\nimport { clone } from '@antv/util';\nimport { getAllProperties } from './utils/node-properties';\nimport { oneHot } from './utils/data-preprocessing';\nimport Vector from './utils/vector';\nimport { NodeConfig } from './types';\n/**\n *  k-means算法 根据节点属性之间的欧氏距离将节点聚类为K个簇\n * @param originNodes 节点集合 \n * @param k 质心（聚类中心）个数\n */\nconst kMeans = (\n    originNodes: NodeConfig[],\n    k: number = 3,\n    involvedKeys: string[] = [],\n    uninvolvedKeys: string[] = [],\n    propertyKey: string = 'properties',\n  ) : NodeConfig[][] => {\n    const nodes = clone(originNodes);\n    // 所有节点属性集合\n    const properties = getAllProperties(nodes, propertyKey);\n    // 所有节点属性one-hot特征向量集合s\n    const allPropertiesWeight = oneHot(properties, involvedKeys, uninvolvedKeys);\n    // 记录节点的原始index，与allPropertiesWeight对应\n    for (let i = 0; i < nodes.length; i++) {\n      nodes[i].originIndex = i;\n    }\n    // 初始化质心（聚类中心）\n    const centroids = [];\n    const centroidIndexList = [];\n    const clusters = [];\n    for (let i = 0; i < k; i ++) {\n      if (i === 0) {\n        // 随机选取质心（聚类中心）\n        const randomIndex = Math.floor(Math.random() * nodes.length);\n        centroids[i] = allPropertiesWeight[randomIndex];\n        centroidIndexList.push(randomIndex);\n        clusters[i] = [nodes[randomIndex]];\n        nodes[randomIndex].clusterId = i;\n      } else {\n        let maxEuclideanDistance = -Infinity;\n        let maxEuclideanDistanceIndex = 0;\n        // 选取与已有质心平均距离最远的点做为新的质心\n        for (let m = 0; m < nodes.length; m++) {\n          if (!centroidIndexList.includes(m)) {\n            let totalEuclideanDistance = 0;\n            for (let j = 0; j < centroids.length; j++) {\n              // 求节点到质心的欧式距离\n              const euclideanDistance = new Vector(allPropertiesWeight[nodes[m].originIndex]).euclideanDistance(new Vector(centroids[j]));\n              totalEuclideanDistance += euclideanDistance;\n            }\n            // 节点到各质心的平均欧式距离\n            const avgEuclideanDistance = totalEuclideanDistance / centroids.length;\n            // 记录到已有质心最远的的距离和节点索引\n            if (avgEuclideanDistance > maxEuclideanDistance) {\n              maxEuclideanDistance = avgEuclideanDistance;\n              maxEuclideanDistanceIndex = m;\n            }\n          }\n        }\n        centroids[i] = allPropertiesWeight[maxEuclideanDistanceIndex];\n        centroidIndexList.push(maxEuclideanDistanceIndex);\n        clusters[i] = [nodes[maxEuclideanDistanceIndex]];\n        nodes[maxEuclideanDistanceIndex].clusterId = i;\n      }\n    }\n\n    let iterations = 0;\n    while (true) {\n      for (let i = 0; i < nodes.length; i++) {\n        let minEuclideanDistanceIndex = 0;\n        let minEuclideanDistance = Infinity;\n        if (!(iterations === 0 && centroidIndexList.includes(i))) {\n          for (let j = 0; j < centroids.length; j++) {\n            // 求节点到质心的欧式距离\n            const euclideanDistance = new Vector(allPropertiesWeight[i]).euclideanDistance(new Vector(centroids[j]));\n            // 记录节点最近的质心的索引\n            if (euclideanDistance < minEuclideanDistance) {\n              minEuclideanDistance = euclideanDistance;\n              minEuclideanDistanceIndex = j;\n            }\n          }\n        \n          // 从原来的类别删除节点\n          if (nodes[i].clusterId !== minEuclideanDistanceIndex) {\n            for (let n = 0; n < clusters[minEuclideanDistanceIndex].length; n++) {\n              if (clusters[minEuclideanDistanceIndex][n].id === nodes[i].id) {\n                clusters[minEuclideanDistanceIndex].splice(n, 1);\n              }\n            }\n            // 将节点划分到距离最小的质心（聚类中心）所对应的类中\n            clusters[minEuclideanDistanceIndex].push(nodes[i]);\n            nodes[i].clusterId = minEuclideanDistanceIndex;\n          }\n        }\n      }\n\n      // 是否存在质心（聚类中心）移动\n      let centroidsEqualAvg = false;\n      for (let i = 0; i < clusters.length; i ++) {\n        const clusterNodes = clusters[i];\n        let totalVector = new Vector([]);\n        for (let j = 0; j < clusterNodes.length; j++) {\n          totalVector = totalVector.add(new Vector(allPropertiesWeight[clusterNodes[j].originIndex]));\n        }\n        // 计算每个类别的均值向量\n        const avgVector = totalVector.avg(clusterNodes.length);\n        // 如果均值向量不等于质心向量\n        if (!avgVector.equal(new Vector(centroids[i]))) {\n          centroidsEqualAvg = true;\n          // 移动/更新每个类别的质心（聚类中心）到该均值向量\n          centroids[i] = avgVector.getArr();\n        }\n      }\n      iterations++;\n      // 如果不存在质心（聚类中心）移动或者迭代次数超过1000，则停止\n      if (centroidsEqualAvg || iterations >= 1000) {\n        break;\n      }\n    }\n    return clusters;\n}\n\nexport default kMeans;\n","import { clone } from '@antv/util';\nimport { NodeConfig } from './types';\nimport { getAllProperties } from './utils/node-properties';\nimport { oneHot } from './utils/data-preprocessing';\nimport cosineSimilarity from './cosine-similarity';\n/**\n *  nodes-cosine-similarity算法 基于节点属性计算余弦相似度(基于种子节点寻找相似节点)\n * @param nodes 图节点数据\n * @param seedNode 种子节点\n * @param involvedKeys 参与计算的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n * @param propertyKey 属性的字段名\n */\nconst nodesCosineSimilarity = (\n  nodes: NodeConfig[] = [],\n  seedNode: NodeConfig,\n  involvedKeys: string[] = [],\n  uninvolvedKeys: string[] = [],\n  propertyKey: string = 'properties',\n): {\n  allCosineSimilarity: number[],\n  similarNodes: NodeConfig[],\n} => {\n  const similarNodes = clone(nodes.filter(node => node.id !== seedNode.id));\n  const seedNodeIndex = nodes.findIndex(node => node.id === seedNode.id);\n  // 所有节点属性集合\n  const properties = getAllProperties(nodes, propertyKey);\n  // 所有节点属性one-hot特征向量集合s\n  const allPropertiesWeight = oneHot(properties, involvedKeys, uninvolvedKeys);\n  // 种子节点属性\n  const seedNodeProperties = allPropertiesWeight[seedNodeIndex];\n\n  const allCosineSimilarity: number[] = [];\n  similarNodes.forEach((node, index) => {\n    if (node.id !== seedNode.id) {\n      // 节点属性\n      const nodeProperties = allPropertiesWeight[index];\n      // 计算节点向量和种子节点向量的余弦相似度\n      const cosineSimilarityValue = cosineSimilarity(nodeProperties, seedNodeProperties);\n      allCosineSimilarity.push(cosineSimilarityValue);\n      node.cosineSimilarity = cosineSimilarityValue;\n    }\n  });\n\n  // 将返回的节点按照余弦相似度大小排序\n  similarNodes.sort((a, b) => b.cosineSimilarity - a.cosineSimilarity);\n  return { allCosineSimilarity, similarNodes };\n}\n\nexport default nodesCosineSimilarity;\n","import { GraphData } from \"./types\";\nimport degree from './degree'\nimport { getNeighbors } from \"./util\";\n\n/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph \n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\nconst pageRank = (graphData: GraphData, epsilon?: number, linkProb?: number): {\n  [key: string]: number;\n} => {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n\n  let distance = 1;\n  let leakedRank = 0;\n  let maxIterations = 1000;\n\n  const { nodes = [], edges = [] } = graphData;\n  const nodesCount = nodes.length;\n  let currentRank;\n  const curRanks = {};\n  const prevRanks = {}\n\n  // Initialize pageranks 初始化\n  for (let j = 0; j < nodesCount; ++j) {\n    const node = nodes[j];\n    const nodeId = node.id;\n    curRanks[nodeId] = (1 / nodesCount)\n    prevRanks[nodeId] = (1 / nodesCount)\n  }\n\n  const nodeDegree = degree(graphData)\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n    for (let j = 0; j < nodesCount; ++j) {\n      const node = nodes[j];\n      const nodeId = node.id;\n      currentRank = 0;\n      if (nodeDegree[node.id].inDegree === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        const neighbors = getNeighbors(nodeId, edges, 'source');\n        for (let i = 0; i < neighbors.length; ++i) {\n          const neighbor = neighbors[i];\n          const outDegree: number = nodeDegree[neighbor].outDegree;\n          if (outDegree > 0) currentRank += (prevRanks[neighbor] / outDegree);\n        }\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n    for (let j = 0; j < nodesCount; ++j) {\n      const node = nodes[j];\n      const nodeId = node.id;\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n    maxIterations -= 1\n  }\n\n  return prevRanks;\n}\n\nexport default pageRank\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","graphData","directed","nodes","edges","matrix","nodeMap","Error","forEach","node","i","id","push","edge","source","target","sIndex","tIndex","defaultComparator","a","b","value","next","toString","callback","comparator","head","tail","compare","prepend","newNode","LinkedListNode","append","delete","deleteNode","currentNode","find","undefined","deleteTail","deletedTail","deleteHead","deletedHead","fromArray","values","toArray","reverse","prevNode","nextNode","map","linkedList","isEmpty","peek","enqueue","dequeue","removeHead","getNeighbors","nodeId","type","currentEdges","filter","getEdgesByNodeId","uniqueId","index","random1","Math","random","split","substr","random2","detectStrongConnectComponents","nodeStack","inStack","indices","lowLink","allComponents","getComponent","neighbors","n","indexOf","targetNodeID","min","targetNode","length","component","tmpNode","pop","getConnectedComponents","visited","neighbor","detectConnectedComponents","degree","degrees","inDegree","outDegree","depthFirstSearchRecursive","previousNode","callbacks","enter","current","previous","allowTraversal","leave","depthFirstSearch","startNodeId","seen","initiatedCallback","stubCallback","allowTraversalCallback","detectAllUndirectedCycle","nodeIds","include","allCycles","rootId","stack","parent","used","Set","curNode","curNodeId","neighborId","has","cycleValid","cyclePath","p","size","findIndex","cycle","add","detectAllDirectedCycle","path","blocked","B","idx2Node","node2Idx","circuit","start","adjList","closed","thisNode","clear","unblock","getMinComponentAdj","components","minCompIdx","minIdx","Infinity","comp","j","c","nodeIdx","subgraphNodes","sccs","scc","startNode","dfsParentMap","unvisitedSet","visitingSet","visitedSet","currentCycleNode","previousCycleNode","keys","__spreadArray","to","from","pack","arguments","ar","l","Array","slice","concat","create","uniq","arr","r","cache","rst","k","default_1","weightPropertyName","marks","D","prevs","nodeNum","minNode","minDis","minVertex","minNodeId","relatedEdges","getOutEdgesNodeId","edgeTarget","edgeSource","w","weight","paths","findAllPaths","allPath","foundPaths","prevPaths","prePath","adjacentMatrix","dist","getArr","otherVector","otherArr","Vector","res","subtract","avg","negate","squareEuclideanDistance","pow","euclideanDistance","sqrt","console","error","normalize","cloneArr","sort","max","norm2","dot","equal","getAllProperties","allProperties","properties","oneHot","dataList","involvedKeys","uninvolvedKeys","allKeyValueMap","data","includes","getAllKeyValueMap","oneHotCode","code","keyValue","allKeyValue","valueIndex","subCode","getModularity","adjMatrix","ks","m","param","modularity","clusteri","clusterId","getInertialModularity","allPropertiesWeight","totalProperties","avgProperties","variance","propertiesi","squareEuclideanDistanceInfo","propertiesj","inertialModularity","clusterj","clusterInertial","Number","toFixed","threshold","inertialWeight","originIndex","every","nodeType","clusters","cid","String","idx","row","iid","entry","jid","totalModularity","previousModularity","iter","finalNodes","finalClusters","increaseWithinThreshold","sumTot","sourceClusterId","targetClusterId","bestCluster","selfCluster","bestIncrease","commonParam","kiin","selfClusterNodes","scNode","scNodeIdx","removeModurarity","selfClusterNodesAfterRemove","propertiesWeightRemove","nodeRemove","removeInertialModularity","nodeNeighborIds","neighborNodeId","neighborClusterId","neighborCluster","clusterNodes","neighborClusterKiin","cNode","cNodeIdx","addModurarity","clusterNodesAfterAdd","propertiesWeightAdd","nodeAdd","addInertialModularity","increase","nodeInSelfClusterIdx","splice","newClusterIdMap","clusterIdx","cluster","newId","item","nodeInfo","clusterEdges","clusterEdgeMap","newEdgeId","count","newEdge","clustersArray","targetItem","targetItemVector","targetNodeNorm2","itemVector","itemNorm2","norm2Product","items","union","rootA","rootB","connected","defaultCompare","compareFn","list","getLeft","getRight","getParent","floor","top","delMin","bottom","moveDown","insert","moveUp","tmp","element","left","right","primMST","selectedEdges","currNode","edgeQueue","currEdge","kruskalMST","weightEdges","disjointSet","curEdge","shift","VACANT_NODE_LABEL","label","edgeMap","addEdge","edgeIdAutoIncrease","nodeLabelMap","edgeLabelMap","counter","getNodeNum","addNode","Node","Edge","rEdge","fromNode","toNode","fromNodeLabel","edgeLabel","toNodeLabel","nodeEdgeNodeLabel","nodeLabel1","nodeLabel2","equalTo","other","formNode","notEqualTo","rmpath","dfsEdgeList","aLength","pushBack","DFSedge","toGraph","graphId","graph","Graph","dfsEdge","fromNodeId","toNodeId","buildRmpath","oldFrom","fromNodeIdx","toNodeIdx","pdfs","his","nodesUsed","edgesUsed","e","preNode","hasNode","hasEdge","graphs","minSupport","minNodeNum","maxNodeNum","verbose","dfsCode","DFScode","support","frequentSize1Subgraphs","frequentSubgraphs","reportDF","findForwardRootEdges","result","findBackwardEdge","edge1","edge2","history","edge2ToEdges","edgeLength","findForwardPureEdges","rightmostEdge","minNodeLabel","rightmostEdgeToId","findForwardRmpathEdges","newToNodeLabel","getSupport","projected","graphMap","pro","findMinLabel","minLabel","isMin","log","dfsCodeMin","otherNode","projectIsMin","maxToC","backwardRoot","flag","newTo","end","History","backwardEdge","minBackwardEdgeLabel","forwardRoot","newFrom","forwardPureEdges","pathLength","forwardRmpathEdges","forwardMinEdgeNodeLabel","report","subGraphMining","generate1EdgeFrequentSubGraphs","nodeLabelCounter","nodeEdgeNodeCounter","nodeLableCounted","nodeEdgeNodeLabelCounted","nodeLabel","graphNodeKey","graphKey","graphNodeEdgeNodeKey","nodeEdgeNodeKey","g","run","DEFAULT_LABEL_NAME","findKNeighborUnits","spm","nodeLabelProp","units","findKNeighborUnit","unitNodeIdxs","labelCountMap","v","dists","nodeIdxs","neighborNum","nodeLabelCountMap","getIntersectNeighborInducedGraph","nodePairMap","neighborUnits","cachedInducedGraphMap","pair","startUnitNodeIds","endUnitNodeIds","endSet","intersect","x","intersectIdMap","intersectLength","getMatchedCount","structure","edgeLabelProp","sourceLabel","targetLabel","strNodeLabel1","strNodeLabel2","strEdgeLabel","getNodeMaps","getEdgeMaps","sourceNode","getSpmMap","iId","jId","getNDSDist","node1","node2","spDist","kNeighborUnits","cachedNDSMap","cachedInterInducedGraph","interInducedGraph","pairMap","distance","stashPatternNodeLabelDegreeMap","minPatternNodeLabelDegreeMap","neighborLabel","patternNodeMap","patternNodeLabelMap","minPatternNodeLabelDegree","minPatternNodeLabelInDegree","minPatternNodeLabelOutDegree","patternNodeWithLabel","patternNodeDegree","patternNodeInDegree","patternNodeOutDegree","maxStep","isMaxStack","getAdjMatrix","breadthFirstSearch","originalCallbacks","initCallbacks","nodeQueue","connectedComponent","getDegree","getInDegree","getOutDegree","detectCycle","detectDirectedCycle","detectAllCycles","dijkstra","findAllPath","isVisited","children","child","findShortestPath","floydWarshall","labelPropagation","maxIteration","changed","neighborClusters","neighborWeight","maxWeight","bestClusterIds","selfClusterIdx","randomIdx","louvain","iLouvain","kCore","minIndexId","kMeans","originNodes","propertyKey","centroids","centroidIndexList","randomIndex","maxEuclideanDistance","maxEuclideanDistanceIndex","totalEuclideanDistance","avgEuclideanDistance","iterations","minEuclideanDistanceIndex","minEuclideanDistance","centroidsEqualAvg","totalVector","avgVector","cosineSimilarity","nodesCosineSimilarity","seedNode","similarNodes","seedNodeIndex","seedNodeProperties","allCosineSimilarity","nodeProperties","cosineSimilarityValue","minimumSpanningTree","algo","prim","kruskal","pageRank","epsilon","linkProb","currentRank","leakedRank","maxIterations","nodesCount","curRanks","prevRanks","nodeDegree","abs","Stack","GADDI","pattern","patternSpm","spmMap","patternSpmMap","patternEdgeLabelMap","patternSpmSpread","patternKNeighborUnits","nodePairsMap","maxNodePairNum","nodePairNumEachNode","ceil","foundNodePairCount","unit","nodePairForICount","outerLoopCount","oidx","innerLoopCount","findNodePairsRandomly","intGMap","freStructures","params","formattedGraphs","fGraph","nodeIdxMap","sourceIdx","targetIdx","formatGraphs","calculator","GSpan","toGraphDatas","structureNum","matchedCountMap","subStructureCount","structures","maxOffset","representClusterType","countMapI","sortedGraphKeys","totalCount","aveCount","aveIntraDist","aveCounts","graphsInCluster","aveIntraPerCluster","graphsNum","graphKey1","graph1Count","graphKey2","aveInterDist","aveCount1","aveCount2","offset","structureCountMap","findRepresentStructure","dsG","ndsDist","beginPNode","candidates","maxNodeNumWithSameLabel","pLabel","nodesWithSameLabel","patternIntGraphMap","patternNDSDist","patternNDSDistMap","patternSpDist","patternSpDistBack","label2","maxDist","patternNodesWithLabel2","patternNodePairMap","nodeWithLabel2","distBack","currentPatternNDSDistArray","patternIntGraph","graphNeighborUnit","graphNeighborUnitCountMap","patternLabel2Num","prune2Invalid","cNodePairMap","neighborNode","currentNDSDistArray","intGraph","prune3Invalid","candidateGraphs","candidate","neighborNodes","unmatched","distToCandidate","keyBack","distFromCandidate","ndsToCandidate","patternKey","undirectedLengthsToBeginPNode","undirectedLengthsToBeginPNodeLabelMap","candidateGraph","candidateNodeLabelCountMap","candidateNodeMap","q","cNodeLabel","candidateEdges","edgeLabelCountMap","pattenrEdgeLabelNum","prunedByEdgeLabel","candidateEdgeNum","candidateGraphInvalid","patternEdgesWithLabel","edgeMatched","patternEdge","patternSource","patternTarget","lengthsToCandidate","targetId","targetNodeLabel","nLabel","degreeChanged","loopCount","cgNode","nodeInDegree","nodeOutDegree","y","cedge","currentLength","cg1","cg1EdgeMap","cg2","cg2EdgeMap","same"],"sourceRoot":""}