"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGraphDnd = exports.defaultNodeFactory = void 0;
var react_1 = __importDefault(require("react"));
var xflow_core_1 = require("@antv/xflow-core");
var x6_1 = require("@antv/x6");
var node_1 = require("../../canvas-dag-extension/x6-extension/node");
var defaultNodeFactory = function (args) {
    return new node_1.XFlowNode(args);
};
exports.defaultNodeFactory = defaultNodeFactory;
var useGraphDnd = function (props) {
    var x6NodeFactory = props.x6NodeFactory, dndOptions = props.dndOptions, onNodeDrop = props.onNodeDrop;
    var _a = (0, xflow_core_1.useXFlowApp)(), graphProvider = _a.graphProvider, modelService = _a.modelService, commandService = _a.commandService;
    var _b = react_1.default.useState(), graphConfig = _b[0], setConfig = _b[1];
    var _c = react_1.default.useState(), dnd = _c[0], setDnd = _c[1];
    var _d = react_1.default.useState(), graph = _d[0], setGraph = _d[1];
    /** 引用 graph 配置 */
    react_1.default.useEffect(function () {
        graphProvider.getGraphInstance().then(function (x6Graph) {
            setGraph(x6Graph);
        });
        graphProvider.getGraphOptions().then(function (x6GraphConfig) {
            setConfig(x6GraphConfig);
        });
    }, [graphProvider, setGraph, setConfig]);
    /** 初始化 Dnd 实例 */
    react_1.default.useEffect(function () {
        if (!graph) {
            return;
        }
        var dndInstance = new x6_1.Addon.Dnd(__assign(__assign({ scaled: false, animation: false }, dndOptions), { target: graph, 
            /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法
             * 在validateNode时调用command添加
             */
            validateNode: function (droppingNode) { return __awaiter(void 0, void 0, void 0, function () {
                var nodeConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            nodeConfig = __assign(__assign({}, droppingNode.getData()), droppingNode.getPosition());
                            if (!onNodeDrop) return [3 /*break*/, 2];
                            return [4 /*yield*/, onNodeDrop(nodeConfig, commandService, modelService)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            console.error('onNodeDrop method is required in NodeTree Panel');
                            _a.label = 3;
                        case 3: return [2 /*return*/, false];
                    }
                });
            }); } }));
        setDnd(dndInstance);
        return function () {
            dndInstance.dispose();
        };
    }, [commandService, modelService, dndOptions, graph, onNodeDrop]);
    /** 开始拖拽 */
    var onMouseDown = react_1.default.useCallback(function (nodeConfig) { return function (e) {
        if (!graph || !dnd || !graphConfig) {
            return;
        }
        if (nodeConfig.isDisabled) {
            return;
        }
        // 获取节点组件
        var renderKey = graphConfig.nodeTypeParser(nodeConfig);
        var reactComponent = nodeConfig.renderComponent
            ? nodeConfig.renderComponent
            : graphConfig.nodeRender.get(renderKey);
        // 包裹节点组件
        var wrappedComponent = (0, xflow_core_1.getNodeReactComponent)(reactComponent, commandService, modelService);
        var nodeData = {
            data: nodeConfig,
            width: nodeConfig.width || 180,
            height: nodeConfig.height || 40,
            view: graphConfig.graphId,
            component: wrappedComponent,
        };
        var x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : (0, exports.defaultNodeFactory)(nodeData);
        dnd.start(x6Node, e.nativeEvent);
    }; }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);
    return { graphConfig: graphConfig, onMouseDown: onMouseDown, modelService: modelService, commandService: commandService };
};
exports.useGraphDnd = useGraphDnd;
//# sourceMappingURL=dnd-hook.js.map